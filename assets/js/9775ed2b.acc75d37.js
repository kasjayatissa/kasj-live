"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[6453],{7621:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"certv2","metadata":{"permalink":"/kasj-live/blog/certv2","source":"@site/blog/2023-03-21-certs/index.md","title":"Fixing my wildcard certificates","description":"In an earlier post, I installed cert-manager to automatically manage my SSL certificates for TLS for my home-lab services. Given it was a set of services within my internal network, I was comfortable with issuing a single wildcard certificate *.local.kasj.live.","date":"2023-03-21T00:00:00.000Z","formattedDate":"March 21, 2023","tags":[{"label":"certificates","permalink":"/kasj-live/blog/tags/certificates"},{"label":"traffik","permalink":"/kasj-live/blog/tags/traffik"},{"label":"cert-manager","permalink":"/kasj-live/blog/tags/cert-manager"}],"readingTime":2.785,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"certv2","title":"Fixing my wildcard certificates","authors":["kas"],"tags":["certificates","traffik","cert-manager"]},"nextItem":{"title":"Recipe and Shopping List Management with Mealie","permalink":"/kasj-live/blog/mealie"}},"content":"In an earlier post, I installed cert-manager to automatically manage my SSL certificates for TLS for my home-lab services. Given it was a set of services within my internal network, I was comfortable with issuing a single wildcard certificate `*.local.kasj.live`. \\r\\n\\r\\n## The problem\\r\\n\\r\\nI\'ve since realised a bit of an issue. The wildcard certificates that are issued are issued as a kubernetes `secret` resource which is specific to a namespace. This meant that in order for me to use the wildcard cert for all my services, I needed to deploy all my services into the same namespace (not ideal). \\r\\n\\r\\n## The research\\r\\n\\r\\nTurns out there were many solutions to this, many of which I don\'t really understand but I tried anyway. This included:\\r\\n\\r\\n* [Installing traefik again with K3s out of the box](https://major.io/2021/08/16/wildcard-letsencrypt-certificates-traefik-cloudflare/) and getting it to issue certs through Let\'s Encrypt without cert-manager. This didn\'t seem to change the behaviour I was experiencing before.\\r\\n* [Storing the wildcard secret in a persistent volume](https://lachlan.io/blog/using-wildcard-certificates-with-traefik-and-k3s) for cert-manager to pick up as a \\"default\\" certificate when nothing else was provided. Unfortunately I couldn\'t get the persistent volume to work either\\r\\n\\r\\n## The solution\\r\\n\\r\\nI landed with a solution outline [here](https://itobey.dev/wildcard-certificates-dns-challenges-and-traefik-in-kubernetes/) and it still doesn\'t work how I want it to but its definitely a step forward. \\r\\n\\r\\nThe first few steps are exactly as I\'d performed in my earlier post:\\r\\n\\r\\n1. Install Traefik\\r\\n2. Install Cert-Manager\\r\\n3. Set up Let\'s Encrypt as an Issuer\\r\\n\\r\\nThis is where I learnt something new:\\r\\n\\r\\n4. Issue a wilcard certificate in the **same namespace as Traefik** in my case this was the `kube-system` namespace - I also issued myself a new one here to keep things fresh `*.home.kasj.live`\\r\\n\\r\\n```yaml title=\\"/home-lab/cluster-setup/cert-manager/wildcard-cert.yaml\\"\\r\\n---\\r\\napiVersion: cert-manager.io/v1\\r\\nkind: Certificate\\r\\nmetadata:\\r\\n  name: wildcard-home-kasj-live\\r\\n  namespace: kube-system\\r\\nspec:\\r\\n  secretName: wildcard-home-kasj-live-tls\\r\\n  issuerRef:\\r\\n    name: letsencrypt-production\\r\\n    kind: ClusterIssuer\\r\\n  # commonName: \\"*.home.kasj.live\\"\\r\\n  dnsNames:\\r\\n    - \\"home.kasj.live\\"\\r\\n    - \\"*.home.kasj.live\\"\\r\\n```\\r\\n\\r\\nTraefik by default normally uses its own self-signed certificate for each ingress service that you define. What I needed to configure was something to tell Traefik to serve the new wildcard certifate I\'d created instead. This can be done through a kubernetes resource called **TLSStore**. \\r\\n\\r\\n5. Create a TLSStore resource with the name  `default`. According to the article above, it needed to be called default to be picked up by Traefik by default:\\r\\n\\r\\n```yaml title=\\"/home-lab/cluster-setup/cert-manager/tls-store.yaml\\"\\r\\n---\\r\\napiVersion: traefik.containo.us/v1alpha1\\r\\nkind: TLSStore\\r\\nmetadata:\\r\\n  name: default\\r\\n  namespace: kube-system\\r\\nspec:\\r\\n  defaultCertificate:\\r\\n    secretName: wildcard-home-kasj-live-tls\\"\\r\\n```\\r\\n\\r\\n6. Restart Traefik deployment so that it knows to pick up the new cert by default\\r\\n\\r\\n## Testing the new solution\\r\\n\\r\\nTo test if Traefik was issuing my new wildcard certificate by default, I created a simple nginx server and exposed it using the following manifest on `test.home.kasj.live`:\\r\\n\\r\\n```yaml title=\\"/home-lab/prod-apps/nginx/ingress.yaml\\"\\r\\n---\\r\\napiVersion: networking.k8s.io/v1\\r\\nkind: Ingress\\r\\nmetadata:\\r\\n  name: nginx\\r\\n  namespace: nginx\\r\\n  annotations:\\r\\n    kubernetes.io/ingress.class: traefik\\r\\n    traefik.ingress.kubernetes.io/redirect-entry-point: https\\r\\nspec:\\r\\n  rules:\\r\\n    - host: test.home.kasj.live\\r\\n      http:\\r\\n        paths:\\r\\n          - backend:\\r\\n              service:\\r\\n                name: nginx\\r\\n                port:\\r\\n                  number: 80\\r\\n            path: /\\r\\n            pathType: Prefix\\r\\n```\\r\\n\\r\\nNote: I\'ve moved away from the `IngressRoute` resource to `Ingress`\\r\\n\\r\\n**Success!**\\r\\n![nginx](nginx.png)\\r\\n![nginx2](nginx2.png)\\r\\n\\r\\nNow earlier, I mentioned it still wasn\'t working as I wanted it to and that\'s because there is still an issue with some services that already expose their services on SSL/HTTPS (Port 443) by default like nextcloud. Stay tuned for a future post on how I tackle that one but for now I\'m going to enjoy this win.\\r\\n\\r\\n![winning](winning.gif)"},{"id":"mealie","metadata":{"permalink":"/kasj-live/blog/mealie","source":"@site/blog/2023-02-24-mealie/index.md","title":"Recipe and Shopping List Management with Mealie","description":"During the COVID period, we start using online grocery shopping with click and collect. It has actually been saving us a bit of money as we\'re not tempted with impulse purchases while walking up and down the ailes. The downside is that the process can actually be quite cumbersome.","date":"2023-02-24T00:00:00.000Z","formattedDate":"February 24, 2023","tags":[{"label":"mealie","permalink":"/kasj-live/blog/tags/mealie"},{"label":"recipe","permalink":"/kasj-live/blog/tags/recipe"},{"label":"shopping-list","permalink":"/kasj-live/blog/tags/shopping-list"}],"readingTime":3.1,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"mealie","title":"Recipe and Shopping List Management with Mealie","authors":["kas"],"tags":["mealie","recipe","shopping-list"]},"prevItem":{"title":"Fixing my wildcard certificates","permalink":"/kasj-live/blog/certv2"},"nextItem":{"title":"Adblocker and DNS server","permalink":"/kasj-live/blog/dns"}},"content":"During the COVID period, we start using online grocery shopping with click and collect. It has actually been saving us a bit of money as we\'re not tempted with impulse purchases while walking up and down the ailes. The downside is that the process can actually be quite cumbersome.\\r\\n\\r\\nWhat we do now:\\r\\n\\r\\n1. Spend ages looking for meal ideas for the week\\r\\n2. Collate a list of recipes\\r\\n3. Collate recipe ingredients\\r\\n4. Check the pantry and finalise shopping list\\r\\n5. Order items in shopping list\\r\\n\\r\\nNow we haven\'t been necessarily doing it in that order either, we have been sporadically looking up recipe at a time and adding things to our online shopping cart over time, a lot of time. Now I don\'t think I can automate this completely but surely there was a better way to help reduce this time with a homelab app. Enter Mealie.\\r\\n\\r\\n## Mealie\\r\\n\\r\\n[Mealie](https://hay-kot.github.io/mealie/) is a self-hosted recipe manager and meal planner with a RestAPI backend and a reactive frontend application. It has some awesome features but the key ones I hope to leverage are:\\r\\n\\r\\n* Ability to create a custome recipe book by importing online recipes\\r\\n* Meal planner to choose our recipes for the week\\r\\n* Shopping list creator based on our meal plan\\r\\n\\r\\n## Installing Mealie\\r\\n\\r\\nI\'ll be using the `kompose convert` method to install Mealie. I\'m not going to cover it again but if you are interested check out my previous post as I installed **Adguard Home** with the same method.\\r\\n\\r\\nThe `kompose convert` command generated the following manifest files for me (I renamed them for my convenience):\\r\\n\\r\\n* 01-mealie-claim0-persistentvolumeclaim.yaml\\r\\n* 02-mealie-deployment.yaml\\r\\n* 03-mealie-service.yaml\\r\\n\\r\\nDeploying these files using `kubectl apply -f mealie/` deploys mealie in my cluster. Now what I need to do is expose this service to a webbrowser. If you\'ve been following my previous posts, I\'ve tried this in two ways, either giving it a network IP through Metallb or using my reverse proxy Traefik to route it through an internal domain. I\'ll be using the Traefik method today.\\r\\n\\r\\nSo to expose my service I create two additional files:\\r\\n\\r\\n`04-mealie-headers.yaml` to specify some middleware to force https:\\r\\n\\r\\n```yaml title=\\"04-mealie-headers.yaml\\"\\r\\napiVersion: traefik.containo.us/v1alpha1\\r\\nkind: Middleware\\r\\nmetadata:\\r\\n  name: mealie-headers\\r\\n  namespace: mealie\\r\\nspec:\\r\\n  headers:\\r\\n    browserXssFilter: true\\r\\n    contentTypeNosniff: true\\r\\n    forceSTSHeader: true\\r\\n    stsIncludeSubdomains: true\\r\\n    stsPreload: true\\r\\n    stsSeconds: 15552000\\r\\n    customFrameOptionsValue: SAMEORIGIN\\r\\n    customRequestHeaders:\\r\\n      X-Forwarded-Proto: https\\r\\n```\\r\\n\\r\\n`05-mealie-ingress.yaml` to specify my routing rule so that when I navigate to `https://mealie.local.kasj.live` Traefik will route to my mealie application:\\r\\n\\r\\n```yaml title=\\"05-mealie-ingress.yaml\\"\\r\\napiVersion: traefik.containo.us/v1alpha1\\r\\nkind: IngressRoute\\r\\nmetadata:\\r\\n  name: mealie-ingress\\r\\n  namespace: mealie\\r\\n  annotations:\\r\\n    kubernetes.io/ingress.class: traefik-external\\r\\nspec:\\r\\n  entryPoints:\\r\\n    - websecure\\r\\n  routes:\\r\\n  - match: Host(`mealie.local.kasj.live`)\\r\\n    kind: Rule\\r\\n    services:\\r\\n    - name: mealie\\r\\n      port: 9925\\r\\n    middlewares:\\r\\n        - name: mealie-headers\\r\\n  tls:\\r\\n    secretName: local-kasj-live-tls\\r\\n```\\r\\n\\r\\n## Testing mealie\\r\\n\\r\\nNavigate to  `mealie.local.kasj.live` and woot - we have an application!\\r\\n\\r\\n![mealie1](mealie1.png)\\r\\n\\r\\nCool feature #1 - **Recipe Import**. All I need to do is enter a recipe URL\\r\\n\\r\\n![mealie5](mealie5.png)\\r\\n\\r\\nAnd mealie imports it for me!\\r\\n\\r\\n![mealie6](mealie6.png)\\r\\n\\r\\nOnce I have a bunch of recipes imported it is time for feature #2 - **Weekly Meal Planner**. I simply just pick from my imported recipes which is pretty quick!\\r\\n\\r\\n![mealie2](mealie2.png)\\r\\n\\r\\nSweet, now that I have weekly meal plan all I need is a shopping list. Hey look feature number #3 - **Shopping List**. Mealie takes all the ingredients from the meals you\'ve selected in your weekly meal plan and throws them in a list for you.\\r\\n\\r\\n![mealie3](mealie3.png)\\r\\n\\r\\nAll we need to do now is trim the list based on what we have already, split the list between us and add to shopping cart!\\r\\n\\r\\n![mealie4](mealie4.png)\\r\\n\\r\\n\\r\\n## Closing thoughts\\r\\n\\r\\nWe\'ve been using Mealie for about a week now and we\'ve cut the time spent on grocery ordering signficantly. Happy wife - thanks mealie!"},{"id":"dns","metadata":{"permalink":"/kasj-live/blog/dns","source":"@site/blog/2023-02-23-dns/index.md","title":"Adblocker and DNS server","description":"I\'ve always been meaning to add an adblocker to my home network and now with the additional need to have internal hostnames for my services this would be a great time to put one in. There were two great open source solutions to consider:","date":"2023-02-23T00:00:00.000Z","formattedDate":"February 23, 2023","tags":[{"label":"adguard","permalink":"/kasj-live/blog/tags/adguard"},{"label":"pihole","permalink":"/kasj-live/blog/tags/pihole"},{"label":"dns","permalink":"/kasj-live/blog/tags/dns"}],"readingTime":7.09,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"dns","title":"Adblocker and DNS server","authors":["kas"],"tags":["adguard","pihole","dns"]},"prevItem":{"title":"Recipe and Shopping List Management with Mealie","permalink":"/kasj-live/blog/mealie"},"nextItem":{"title":"Persistent volumes and NFS","permalink":"/kasj-live/blog/nfs"}},"content":"I\'ve always been meaning to add an adblocker to my home network and now with the additional need to have internal hostnames for my services this would be a great time to put one in. There were two great open source solutions to consider:\\r\\n\\r\\n* **Pihole** - Pi-hole is a general purpose network-wide ad-blocker that protects your network from ads and trackers without requiring any setup on individual devices. It is able to block ads on any network device\\r\\n\\r\\n* **Adguard Home** - AdGuard Home is a network-wide software for blocking ads & tracking. After you set it up, it\u2019ll cover ALL your home devices, and you don\u2019t need any client-side software for that.\\r\\n\\r\\n\\r\\nHonestly I really can\'t tell the difference so I decided to install both to trial!\\r\\n\\r\\n## Pihole\\r\\n\\r\\n### Installing Pihole\\r\\n\\r\\nI wanted to create a bit of a file structure with all the required manifests which I can deploy at once:\\r\\n\\r\\n* `01-pihole-namespaces.yaml` - manifest to create a namespace\\r\\n* `02-pihole-configs.yaml` - manifest to specify configuration values such as whitelist domains and blocklists\\r\\n* `03-pihole-deployment.yaml` - manifest to specify deployment of pihole such as the container location\\r\\n* `04-pihole-service.yaml` - manifest to specify by port mappings and service exposure between container and pod\\r\\n\\r\\n:::note\\r\\nWorth noting here that I would normally be adding a `pihole-ingress.yaml` file here too to specify my traefik ingressRoute b resource but I won\'t be using traefik for this pihole or adguard home (as it will be a dns server)\\r\\n:::\\r\\n\\r\\nI also found out that you can run `kubectl apply -f` on and entire folder which deploys all the manifests within the folder specified so in my case:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f pihole/\\r\\n```\\r\\n### Testing Pihole\\r\\n\\r\\nAs mentioned earlier, I didn\'t use Traefik for this service so I\'m expecting that Metallb assigned a separate IP address allocated.\\r\\n\\r\\n![pihole](pihole.png)\\r\\n\\r\\nLooks good, so I just need to navigate to `http://192.168.86.101/admin` in my webbrowser to get to the admin portal\\r\\n\\r\\n![pihole2](pihole2.png)\\r\\n\\r\\nAn voila! Happy days. I can now use this as my DNS server, define some local DNS entries and start blocking some ads!\\r\\n\\r\\n## Adguard Home\\r\\n\\r\\n### Installing Adguard Home\\r\\n\\r\\nI thought I\'d try installing Adguard Home slightly differently and use the Kompose tool instead. Kompose is simple, you give it a `docker-compose.yaml` and it outputs a set of kubernetes manifests for you.\\r\\n\\r\\nFirst things first, we need a docker-compose file so I head on over to docker hub to grab one for adguard. The docker-compose file looks like this:\\r\\n\\r\\n```yaml title=\\"docker-compose.yaml\\"\\r\\nversion: \'3.3\'\\r\\nservices:\\r\\n    adguard:\\r\\n        container_name: adguardhome\\r\\n        restart: unless-stopped\\r\\n        volumes:\\r\\n            - \'/my/own/workdir:/opt/adguardhome/work\'\\r\\n            - \'/my/own/confdir:/opt/adguardhome/conf\'\\r\\n        ports:\\r\\n            - \'53:53/tcp\'\\r\\n            - \'53:53/udp\'\\r\\n            - \'67:67/udp\'\\r\\n            - \'68:68/udp\'\\r\\n            - \'80:80/tcp\'\\r\\n            - \'443:443/tcp\'\\r\\n            - \'443:443/udp\'\\r\\n            - \'3000:3000/tcp\'\\r\\n            - \'853:853/tcp\'\\r\\n            - \'784:784/udp\'\\r\\n            - \'853:853/udp\'\\r\\n            - \'8853:8853/udp\'\\r\\n            - \'5443:5443/tcp\'\\r\\n            - \'5443:5443/udp\'\\r\\n        image: run\\r\\n```\\r\\n\\r\\nAfter installing [kompose](https://kompose.io/), all I run `kompose convert` to give my manifest files. Kompose gives me the following manifest files:\\r\\n\\r\\n* `adguard-claim0-persistentvolumeclaim.yaml`\\r\\n* `adguard-claim1-persistentvolumeclaim.yaml`\\r\\n* `adguard-deployment.yaml`\\r\\n* `adguard-service.yaml`\\r\\n\\r\\nTo see the manifest in detail, I\'ve included them in the Appendix below. \\r\\n\\r\\n:::note\\r\\nI did need to make a slight change to the `adguard-service.yaml` auto generated file and that was to add the `LoadBalancer` service type. This tells Kubernetes that I needed and external IP from Metallb\\r\\n:::\\r\\n\\r\\nFinally I create a namespace and run all manifests with:\\r\\n\\r\\n```bash\\r\\nkubectl create namespace adguard\\r\\nkubectl apply -f adguard/ -n adguard\\r\\n```\\r\\n\\r\\n## Testing Adguard Home\\r\\n\\r\\nAs with PiHole, I was expecting to see the pods running and an external IP that I could navigate to with my browser:\\r\\n\\r\\n![adguard](adguard.png)\\r\\n\\r\\nSweet - looks like `192.168.86.102` was allocated.\\r\\n\\r\\n![adguard2](adguard2.png)\\r\\n\\r\\n## Closing thoughts\\r\\n\\r\\nBoth Pihole and Adguard Home are very similar from a feature set perspective so I haven\'t really managed to separate them as yet. If I was being super picky I\'d say that Pihole is *slightly* more customisable with blocklists and Adguard Home has a *slightly* better UI. I haven\'t decided if one it better than the other so I\'ll keep them both running for now and switch DNS Servers from time to time.\\r\\n\\r\\n## Appendix\\r\\n\\r\\n### Pihole Manifests\\r\\n\\r\\nFor those interested in the manifests here they are:\\r\\n\\r\\n#### Namespace\\r\\n\\r\\n```yaml title=\\"01-pihole-namespaces.yaml\\"\\r\\napiVersion: v1\\r\\nkind: Namespace\\r\\nmetadata:\\r\\n  name: pihole\\r\\n```\\r\\n\\r\\n#### Configuration\\r\\n\\r\\n\\r\\n```yaml title=\\"02-pihole-configs.yaml\\"\\r\\napiVersion: v1\\r\\nkind: ConfigMap\\r\\nmetadata:\\r\\n  name: custom.list\\r\\n  namespace: pihole\\r\\ndata:\\r\\n  custom.list: |\\r\\n    192.168.86.41 k3smaster\\r\\n    192.168.86.40 k3snode01\\r\\n    192.168.86.100 traefik.local.kasj.live\\r\\n    192.168.86.101 pihole.local.kasj.live\\r\\n    192.168.86.100 dash.local.kasj.live\\r\\n    192.168.86.100 grocy.local.kasj.live\\r\\n    192.168.86.100 kuma.local.kasj.live\\r\\n    192.168.86.100 cloud.local.kasj.live\\r\\n    192.168.86.100 portainer.local.kasj.live\\r\\n    192.168.86.100 argocd.local.kasj.live\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ConfigMap\\r\\nmetadata:\\r\\n  name: adlists.list\\r\\n  namespace: pihole\\r\\ndata:\\r\\n  adlists.list: |\\r\\n    https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\\r\\n    https://adaway.org/hosts.txt\\r\\n    https://v.firebog.net/hosts/AdguardDNS.txt\\r\\n    https://v.firebog.net/hosts/Admiral.txt\\r\\n    https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt\\r\\n    https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt\\r\\n    https://v.firebog.net/hosts/Easylist.txt\\r\\n    https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext\\r\\n    https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\\r\\n    https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts\\r\\n    https://v.firebog.net/hosts/static/w3kbl.txt\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ConfigMap\\r\\nmetadata:\\r\\n  name: whitelist.txt\\r\\n  namespace: pihole\\r\\ndata:\\r\\n  whitelist.txt: |\\r\\n    ichnaea.netflix.com\\r\\n    nrdp.nccp.netflix.com\\r\\n    androidtvchannels-pa.googleapis.com\\r\\n    lcprd1.samsungcloudsolution.net\\r\\n```\\r\\n\\r\\n#### Deployment\\r\\n\\r\\n```yaml title=\\"03-pihole-deployment.yaml\\"\\r\\nas@lappa:~$ cat home-lab/prod-apps/pihole/03-pihole-deployment.yaml\\r\\napiVersion: apps/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n  labels:\\r\\n    app: pihole\\r\\n  name: pihole\\r\\n  namespace: pihole\\r\\nspec:\\r\\n  replicas: 1\\r\\n  selector:\\r\\n    matchLabels:\\r\\n      app: pihole\\r\\n  strategy:\\r\\n    rollingUpdate:\\r\\n      maxSurge: 1\\r\\n      maxUnavailable: 0\\r\\n    type: RollingUpdate\\r\\n  template:\\r\\n    metadata:\\r\\n      labels:\\r\\n        app: pihole\\r\\n    spec:\\r\\n      containers:\\r\\n      - env:\\r\\n        - name: TZ\\r\\n          value: Australia/Melbourne\\r\\n        - name: WEBPASSWORD\\r\\n          value:\\r\\n        - name: DNS1\\r\\n          value: 9.9.9.9\\r\\n        - name: DNS2\\r\\n          value: 1.1.1.1\\r\\n        image: pihole/pihole:latest\\r\\n        imagePullPolicy: IfNotPresent\\r\\n        name: pihole\\r\\n        ports:\\r\\n        - name: dns-tcp\\r\\n          containerPort: 53\\r\\n          protocol: TCP\\r\\n        - name: dns-udp\\r\\n          containerPort: 53\\r\\n          protocol: UDP\\r\\n        - name: dhcp\\r\\n          containerPort: 67\\r\\n          protocol: UDP\\r\\n        - name: web\\r\\n          containerPort: 80\\r\\n          protocol: TCP\\r\\n        - name: https\\r\\n          containerPort: 443\\r\\n          protocol: TCP\\r\\n        resources:\\r\\n          requests:\\r\\n            cpu: \\"20m\\"\\r\\n            memory: \\"512Mi\\"\\r\\n          limits:\\r\\n            cpu: \\"250m\\"\\r\\n            memory: \\"896Mi\\"\\r\\n        readinessProbe:\\r\\n          exec:\\r\\n            command: [\'dig\', \'@127.0.0.1\', \'cnn.com\']\\r\\n          timeoutSeconds: 20\\r\\n          initialDelaySeconds: 5\\r\\n          periodSeconds: 60\\r\\n        livenessProbe:\\r\\n          tcpSocket:\\r\\n            port: dns-tcp\\r\\n          initialDelaySeconds: 15\\r\\n          periodSeconds: 30\\r\\n        volumeMounts:\\r\\n        - name: etc-pihole\\r\\n          mountPath: /etc/pihole\\r\\n        - name: etc-dnsmasq\\r\\n          mountPath: /etc/dnsmasq.d\\r\\n        - name: var-log\\r\\n          mountPath: /var/log\\r\\n        - name: var-log-lighttpd\\r\\n          mountPath: /var/log/lighttpd\\r\\n        - name: adlists\\r\\n          mountPath: /etc/pihole/adlists.list\\r\\n          subPath: adlists.list\\r\\n        - name: customlist\\r\\n          mountPath: /etc/pihole/custom.list\\r\\n          subPath: custom.list\\r\\n      restartPolicy: Always\\r\\n      volumes:\\r\\n      - name: etc-pihole\\r\\n        emptyDir:\\r\\n          medium: Memory\\r\\n      - name: etc-dnsmasq\\r\\n        emptyDir:\\r\\n          medium: Memory\\r\\n      - name: var-log\\r\\n        emptyDir:\\r\\n          medium: Memory\\r\\n      - name: var-log-lighttpd\\r\\n        emptyDir:\\r\\n          medium: Memory\\r\\n      - name: adlists\\r\\n        configMap:\\r\\n          name: adlists.list\\r\\n          items:\\r\\n            - key: adlists.list\\r\\n              path: adlists.list\\r\\n      - name: customlist\\r\\n        configMap:\\r\\n          name: custom.list\\r\\n          items:\\r\\n            - key: custom.list\\r\\n              path: custom.list\\r\\n```\\r\\n\\r\\n#### Service\\r\\n\\r\\n```yaml title=\\"04-pihole-service.yaml\\"\\r\\nkind: Service\\r\\napiVersion: v1\\r\\nmetadata:\\r\\n  name: pihole-udp\\r\\n  namespace: pihole\\r\\n  annotations:\\r\\n    metallb.universe.tf/allow-shared-ip: dns\\r\\nspec:\\r\\n  selector:\\r\\n    app: pihole\\r\\n  ports:\\r\\n  - protocol: UDP\\r\\n    port: 53\\r\\n    name: dnsudp\\r\\n    targetPort: 53\\r\\n  type: LoadBalancer\\r\\n\\r\\n---\\r\\nkind: Service\\r\\napiVersion: v1\\r\\nmetadata:\\r\\n  name: pihole-tcp\\r\\n  namespace: pihole\\r\\n  annotations:\\r\\n    metallb.universe.tf/allow-shared-ip: dns\\r\\nspec:\\r\\n  selector:\\r\\n    app: pihole\\r\\n  ports:\\r\\n  - protocol: TCP\\r\\n    port: 53\\r\\n    name: dnstcp\\r\\n    targetPort: 53\\r\\n  - protocol: TCP\\r\\n    port: 80\\r\\n    name: web\\r\\n    targetPort: 80\\r\\n  type: LoadBalancer\\r\\n```\\r\\n\\r\\n### Adguard Manifests\\r\\n\\r\\n#### Volume claims\\r\\n\\r\\n```yaml title=\\"adguard-claim0-persistentvolumeclaim.yaml\\"\\r\\napiVersion: v1\\r\\nkind: PersistentVolumeClaim\\r\\nmetadata:\\r\\n  creationTimestamp: null\\r\\n  labels:\\r\\n    io.kompose.service: adguard-claim0\\r\\n  name: adguard-claim0\\r\\nspec:\\r\\n  accessModes:\\r\\n    - ReadWriteOnce\\r\\n  resources:\\r\\n    requests:\\r\\n      storage: 100Mi\\r\\nstatus: {}\\r\\n```\\r\\n\\r\\n```yaml title=\\"adguard-claim1-persistentvolumeclaim.yaml\\"\\r\\napiVersion: v1\\r\\nkind: PersistentVolumeClaim\\r\\nmetadata:\\r\\n  creationTimestamp: null\\r\\n  labels:\\r\\n    io.kompose.service: adguard-claim1\\r\\n  name: adguard-claim1\\r\\nspec:\\r\\n  accessModes:\\r\\n    - ReadWriteOnce\\r\\n  resources:\\r\\n    requests:\\r\\n      storage: 100Mi\\r\\nstatus: {}\\r\\n```\\r\\n\\r\\n#### Deployment\\r\\n\\r\\n```yaml title=\\"adguard-deployment.yaml\\"\\r\\napiVersion: apps/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n  annotations:\\r\\n    kompose.cmd: kompose convert\\r\\n    kompose.version: 1.26.0 (40646f47)\\r\\n  creationTimestamp: null\\r\\n  labels:\\r\\n    io.kompose.service: adguard\\r\\n  name: adguard\\r\\nspec:\\r\\n  replicas: 1\\r\\n  selector:\\r\\n    matchLabels:\\r\\n      io.kompose.service: adguard\\r\\n  strategy:\\r\\n    type: Recreate\\r\\n  template:\\r\\n    metadata:\\r\\n      annotations:\\r\\n        kompose.cmd: kompose convert\\r\\n        kompose.version: 1.26.0 (40646f47)\\r\\n      creationTimestamp: null\\r\\n      labels:\\r\\n        io.kompose.service: adguard\\r\\n    spec:\\r\\n      containers:\\r\\n        - image: adguard/adguardhome\\r\\n          name: adguardhome\\r\\n          ports:\\r\\n            - containerPort: 53\\r\\n            - containerPort: 53\\r\\n              protocol: UDP\\r\\n            - containerPort: 67\\r\\n              protocol: UDP\\r\\n            - containerPort: 68\\r\\n              protocol: UDP\\r\\n            - containerPort: 80\\r\\n            - containerPort: 443\\r\\n            - containerPort: 443\\r\\n              protocol: UDP\\r\\n            - containerPort: 3000\\r\\n            - containerPort: 853\\r\\n            - containerPort: 784\\r\\n              protocol: UDP\\r\\n            - containerPort: 853\\r\\n              protocol: UDP\\r\\n            - containerPort: 8853\\r\\n              protocol: UDP\\r\\n            - containerPort: 5443\\r\\n            - containerPort: 5443\\r\\n              protocol: UDP\\r\\n          resources: {}\\r\\n          volumeMounts:\\r\\n            - mountPath: /opt/adguardhome/work\\r\\n              name: adguard-claim0\\r\\n            - mountPath: /opt/adguardhome/conf\\r\\n              name: adguard-claim1\\r\\n      restartPolicy: Always\\r\\n      volumes:\\r\\n        - name: adguard-claim0\\r\\n          persistentVolumeClaim:\\r\\n            claimName: adguard-claim0\\r\\n        - name: adguard-claim1\\r\\n          persistentVolumeClaim:\\r\\n            claimName: adguard-claim1\\r\\nstatus: {}\\r\\n```\\r\\n\\r\\n#### Service\\r\\n\\r\\n```yaml title=\\"adguard-service.yaml\\"\\r\\napiVersion: v1\\r\\nkind: Service\\r\\nmetadata:\\r\\n  annotations:\\r\\n    kompose.cmd: kompose convert\\r\\n    kompose.version: 1.26.0 (40646f47)\\r\\n  creationTimestamp: null\\r\\n  labels:\\r\\n    io.kompose.service: adguard\\r\\n  name: adguard\\r\\nspec:\\r\\n  ports:\\r\\n    - name: \\"53\\"\\r\\n      port: 53\\r\\n      targetPort: 53\\r\\n    - name: 53-udp\\r\\n      port: 53\\r\\n      protocol: UDP\\r\\n      targetPort: 53\\r\\n    - name: \\"67\\"\\r\\n      port: 67\\r\\n      protocol: UDP\\r\\n      targetPort: 67\\r\\n    - name: \\"68\\"\\r\\n      port: 68\\r\\n      protocol: UDP\\r\\n      targetPort: 68\\r\\n    - name: \\"80\\"\\r\\n      port: 80\\r\\n      targetPort: 80\\r\\n    - name: \\"443\\"\\r\\n      port: 443\\r\\n      targetPort: 443\\r\\n    - name: 443-udp\\r\\n      port: 443\\r\\n      protocol: UDP\\r\\n      targetPort: 443\\r\\n    - name: \\"3000\\"\\r\\n      port: 3000\\r\\n      targetPort: 3000\\r\\n    - name: \\"853\\"\\r\\n      port: 853\\r\\n      targetPort: 853\\r\\n    - name: \\"784\\"\\r\\n      port: 784\\r\\n      protocol: UDP\\r\\n      targetPort: 784\\r\\n    - name: 853-udp\\r\\n      port: 853\\r\\n      protocol: UDP\\r\\n      targetPort: 853\\r\\n    - name: \\"8853\\"\\r\\n      port: 8853\\r\\n      protocol: UDP\\r\\n      targetPort: 8853\\r\\n    - name: \\"5443\\"\\r\\n      port: 5443\\r\\n      targetPort: 5443\\r\\n    - name: 5443-udp\\r\\n      port: 5443\\r\\n      protocol: UDP\\r\\n      targetPort: 5443\\r\\n  type: LoadBalancer\\r\\n  selector:\\r\\n    io.kompose.service: adguard\\r\\n```"},{"id":"nfs","metadata":{"permalink":"/kasj-live/blog/nfs","source":"@site/blog/2023-02-20-nfs/index.md","title":"Persistent volumes and NFS","description":"Containers and pods are ephemeral, kubernetes provides a great advantage of being able to orchestrate the deployment, scaling, deletion of pods. But what about storage? If we use a pod\'s local filesystem for a given application and that pod is deleted, the application data disappears with it. To solve for this, we need to leverage kubernetes storage classes. Kubernetes supports a number of various storage classes ranging from public cloud storage offering to local file storage. Think the best option for me is a NFS","date":"2023-02-20T00:00:00.000Z","formattedDate":"February 20, 2023","tags":[{"label":"nfs","permalink":"/kasj-live/blog/tags/nfs"},{"label":"persistent-volumes","permalink":"/kasj-live/blog/tags/persistent-volumes"}],"readingTime":2.925,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"nfs","title":"Persistent volumes and NFS","authors":["kas"],"tags":["nfs","persistent-volumes"]},"prevItem":{"title":"Adblocker and DNS server","permalink":"/kasj-live/blog/dns"},"nextItem":{"title":"Certificates for HTTPS","permalink":"/kasj-live/blog/certs"}},"content":"Containers and pods are ephemeral, kubernetes provides a great advantage of being able to orchestrate the deployment, scaling, deletion of pods. But what about storage? If we use a pod\'s local filesystem for a given application and that pod is deleted, the application data disappears with it. To solve for this, we need to leverage kubernetes **storage classes**. Kubernetes supports a number of [various storage classes](https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner) ranging from public cloud storage offering to local file storage. Think the best option for me is a [NFS](https://kubernetes.io/docs/concepts/storage/storage-classes/#nfs)\\r\\n\\r\\n## Installing an NFS server\\r\\n\\r\\nSo if I were to do this properly, I\'d be running a NAS or NFS box but since I\'ve skimped on the hardware, I\'ll be installing a NFS server on the same server as my cluster. You might be thinking *\\"mate, that\'s just the same as local storage\\"* and you would be right but I wanted to eventually switch to a separate NAS so figured I\'d just learn how to do this.\\r\\n\\r\\nThere are plenty of tutorials available on how to install NFS on Ubuntu but i followed this one. Here are the key commands I took away to get the job done:\\r\\n\\r\\nInstall the NFS server and export `/nfs` which is accessible by the Kubernetes cluster:\\r\\n\\r\\n```bash\\r\\nsudo su\\r\\napt update && apt -y upgrade\\r\\napt install -y nfs-server\\r\\nexit\\r\\n\\r\\nmkdir /nfs\\r\\ncat << EOF >> /etc/exports\\r\\n/nfs 192.168.86.41(rw,no_subtree_check,no_root_squash)\\r\\nEOF\\r\\n\\r\\nsystemctl enable --now nfs-server\\r\\nexportfs -ar\\r\\n```\\r\\n\\r\\nIf I ever add another node to my cluster I need to ensure that a NFS client package is installed  able to connect to the NFS server but this isn\'t required as my NFS server is the same as my Kubernetes node:\\r\\n\\r\\n```bash\\r\\napt install -y nfs-common\\r\\n```\\r\\n\\r\\n## Persistent Volumes\\r\\n\\r\\nNow that I have a storage location, it is probably worth mentioning that the kubernetes rescource associated to persistent storage is **Persistent Volumes**. Like any other resource, I can provision persistent volumes declaritively to whatever storage class I specify.\\r\\n\\r\\nOnce a persistent volume is created, an application deployment can leverage the persistent volume using a **Persistent Volume Claim**. I could be wrong here but I think only one persistent volume claim can be applied to a persistent volume.\\r\\n\\r\\n## Dynamic Provisioning of Persistent Volumes\\r\\n\\r\\nKubernetes also provides you the ability to dynamically provision storage to applications. I found a nifty little tool that someone made called [NFS subdir external provisioner](https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner) which is an automatic provisioner that uses your existing and already configured NFS server to support dynamic provisioning of Kubernetes Persistent Volumes via Persistent Volume Claims. Persistent volumes are provisioned as `${namespace}-${pvcName}-${pvName}`. To install this I run:\\r\\n\\r\\n```bash\\r\\nhelm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner\\r\\n\\r\\nhelm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\\\\\r\\n  --create-namespace \\\\\\r\\n  --namespace nfs-provisioner \\\\\\r\\n  --set nfs.server=192.168.86.41 \\\\\\r\\n  --set nfs.path=/nfs\\r\\n```\\r\\n\\r\\n## Testing the provisioner\\r\\n\\r\\nTo test the provisioner I run:\\r\\n\\r\\n```bash\\r\\nkubectl get sc\\r\\n```\\r\\n\\r\\n![nfs](nfs.png)\\r\\n\\r\\nAnd will use following persistent volume claim manifest:\\r\\n\\r\\n```yaml\\r\\napiVersion: v1\\r\\nkind: PersistentVolumeClaim\\r\\nmetadata:\\r\\n  name: nfs-test\\r\\n  labels:\\r\\n    storage.k8s.io/name: nfs\\r\\n    storage.k8s.io/part-of: kubernetes-complete-reference\\r\\n    storage.k8s.io/created-by: ssbostan\\r\\nspec:\\r\\n  accessModes:\\r\\n    - ReadWriteMany\\r\\n  storageClassName: nfs-client\\r\\n  resources:\\r\\n    requests:\\r\\n      storage: 1Gi\\r\\n```\\r\\n\\r\\nThings of note here:\\r\\n\\r\\n* `name` will vary for each volume claim - I will use the convention of `<app_name>-pvc`\\r\\n* `labels` doesn\'t change for my needs\\r\\n* `accessModes` doesn\'t change for my needs\\r\\n* `storageClassName` doesn\'t change for my needs\\r\\n* `storage` will vary for the app but worth noting that the whole specified range is provisioned (not just what you use)\\r\\n\\r\\nThat covers all the core cluster services I reckon, time to install some apps!"},{"id":"certs","metadata":{"permalink":"/kasj-live/blog/certs","source":"@site/blog/2023-02-16-letsencrypt/index.md","title":"Certificates for HTTPS","description":"Automatic Certificate Management Environment (ACME) Certificates can are usually provided through issuers. LetsEncrypt is a nonprofit Certificate Authority that provides free TLS certificates to millions of websites all around the world. This is was good enough for me!","date":"2023-02-16T00:00:00.000Z","formattedDate":"February 16, 2023","tags":[{"label":"certificates","permalink":"/kasj-live/blog/tags/certificates"},{"label":"letsencrypt","permalink":"/kasj-live/blog/tags/letsencrypt"}],"readingTime":3.575,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"certs","title":"Certificates for HTTPS","authors":["kas"],"tags":["certificates","letsencrypt"]},"prevItem":{"title":"Persistent volumes and NFS","permalink":"/kasj-live/blog/nfs"},"nextItem":{"title":"Certificate manager for cluster","permalink":"/kasj-live/blog/cert-manager"}},"content":"Automatic Certificate Management Environment (ACME) Certificates can are usually provided through issuers. LetsEncrypt is a nonprofit Certificate Authority that provides free TLS certificates to millions of websites all around the world. This is was good enough for me!\\r\\n\\r\\n## Adding cloudflare token to cert-manager\\r\\n\\r\\nFirst I needed a domain name which I purchased through CloudFlare but can be from anywhere really. You guessed it - mine is `kasj.live`. From there I needed to obtain an cloudflare token which was a personal access token to manage my DNS records in my cloudflare account. I needed this as I needed to provide it to cert-manager, which will be brokering the certificates between letsencrypt and my domain.\\r\\n\\r\\nProviding cert-manager my cloudflare token could be done with a simple manifest:\\r\\n\\r\\n```yaml title=secret-cf-token.yaml\\r\\napiVersion: v1\\r\\nkind: Secret\\r\\nmetadata:\\r\\n  name: cloudflare-token-secret\\r\\n  namespace: cert-manager\\r\\ntype: Opaque\\r\\nstringData:\\r\\n  cloudflare-token: <redacted>\\r\\n```\\r\\n\\r\\nTo apply the manifest run:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f secret-cf-token.yaml\\r\\n```\\r\\n\\r\\n## Adding Let\'s Encrypt as an Issuer to cert-manager\\r\\n\\r\\nI now need to let cert-manager know that I\'ll be using Let\'s Encrypt as my certificate issuer of choice through another manifest:\\r\\n\\r\\n```yaml title=\\"letsencrypt-production.yaml\\"\\r\\napiVersion: cert-manager.io/v1\\r\\nkind: ClusterIssuer\\r\\nmetadata:\\r\\n  name: letsencrypt-production\\r\\nspec:\\r\\n  acme:\\r\\n    server: https://acme-v02.api.letsencrypt.org/directory\\r\\n    email: kasunj@gmail.com\\r\\n    privateKeySecretRef:\\r\\n      name: letsencrypt-production\\r\\n    solvers:\\r\\n      - dns01:\\r\\n          cloudflare:\\r\\n            email: kasunj@gmail.com\\r\\n            apiTokenSecretRef:\\r\\n              name: cloudflare-token-secret\\r\\n              key: cloudflare-token\\r\\n        selector:\\r\\n          dnsZones:\\r\\n            - \\"kasj.live\\"\\r\\n```\\r\\n\\r\\nand execute using:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f letsencrypt-production.yaml\\r\\n```\\r\\n\\r\\n## Issuing certificates\\r\\n\\r\\nWith the issuer now configured, all I need to do is request for a certificate. I will be hosting all my internal applications under the subdomain `local.kasj.live` so i will request for a wildcard certicate that covers `*.local.kasj.live`\\r\\n\\r\\nThe certificate is issued with the following manifest:\\r\\n\\r\\n```yaml title=\\"local-kasj-live.yaml\\"\\r\\napiVersion: cert-manager.io/v1\\r\\nkind: Certificate\\r\\nmetadata:\\r\\n  name: local-kasj-live\\r\\n  namespace: default\\r\\nspec:\\r\\n  secretName: local-kasj-live-tls\\r\\n  issuerRef:\\r\\n    name: letsencrypt-production\\r\\n    kind: ClusterIssuer\\r\\n  commonName: \\"*.local.kasj.live\\"\\r\\n  dnsNames:\\r\\n  - \\"local.kasj.live\\"\\r\\n  - \\"*.local.kasj.live\\"\\r\\n```\\r\\n\\r\\nand execute using:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f local-kasj-live.yaml\\r\\n```\\r\\n\\r\\nIssuing  and validating the certificates takes time (20 minutes minimum). To check how things are progressing run:\\r\\n\\r\\n```bash\\r\\nkubectl get challenges\\r\\n```\\r\\n\\r\\n:::caution\\r\\n\\r\\nYou\'ll notice that I use the issuer name `letsencrypt-production` - I didn\'t jump straight to this but rather used `letsencrypt-staging` first to make sure all my configuration was correct. If you jump straight to production but if it doesn\'t work for whatever reason you might be locked out by letsencrypt for a period of time.\\r\\n\\r\\n:::\\r\\n\\r\\n## Testing the issued certificate\\r\\n\\r\\nOnce the `kubectl get challenges` command produces nothing, that\'s when you know the process is complete. To use a certificate, you need to ensure a couple of things:\\r\\n\\r\\n* The certificate needs to be made available in multiple namespaces. The certificate only works if it is deployed in the same namespaces as the service you are using it for. With a bit of googling I\'ve been using the following [solution](https://github.com/mittwald/kubernetes-replicator) for this.\\r\\n\\r\\n* We use Traefik to specify and `ingressRoute` which essentionally provides traefik with the instructions on where to route traffic hitting the reverse proxy. We can also specify here that a certificate must be used.\\r\\n\\r\\nTo test above, I deployed the Traefik dashboard (with the help of their documentation and TechnoTim) with the following steps:\\r\\n\\r\\nCreate and deploy a middleware manifest that forces https:\\r\\n\\r\\n```yaml title=\\"middleware.yaml\\"\\r\\napiVersion: traefik.containo.us/v1alpha1\\r\\nkind: Middleware\\r\\nmetadata:\\r\\n  name: traefik-dashboard-basicauth\\r\\n  namespace: traefik\\r\\nspec:\\r\\n  basicAuth:\\r\\n    secret: traefik-dashboard-auth\\r\\n```\\r\\n\\r\\nGenerate a credential whichi is mandatory for the dashboard:\\r\\n\\r\\n```bash\\r\\n# Generate a credential / password that\u2019s base64 encoded\\r\\nhtpasswd -nb kas <redacted> | openssl base64\\r\\n```\\r\\n\\r\\nCreate and apply a manifest to deploy the dashboard. Note you need to use the output from command above for the password:\\r\\n\\r\\n```yaml\\r\\n---\\r\\napiVersion: v1\\r\\nkind: Secret\\r\\nmetadata:\\r\\n  name: traefik-dashboard-auth\\r\\n  namespace: traefik\\r\\ntype: Opaque\\r\\ndata:\\r\\n  users: <redacted hased password which is output from above>\\r\\n```\\r\\n\\r\\nFinally I create a manifest for an `ingressRoute` which will route traffic from `traefik.local.kasj.live` to my dashboard using TLS certificate I just created:\\r\\n\\r\\n```yaml title=\\"traefik-ingress.yaml\\"\\r\\napiVersion: traefik.containo.us/v1alpha1\\r\\nkind: IngressRoute\\r\\nmetadata:\\r\\n  name: traefik-dashboard\\r\\n  namespace: traefik\\r\\n  annotations:\\r\\n    kubernetes.io/ingress.class: traefik-external\\r\\nspec:\\r\\n  entryPoints:\\r\\n    - websecure\\r\\n  routes:\\r\\n    - match: Host(`traefik.local.kasj.live`)\\r\\n      kind: Rule\\r\\n      middlewares:\\r\\n        - name: traefik-dashboard-basicauth\\r\\n          namespace: traefik\\r\\n      services:\\r\\n        - name: api@internal\\r\\n          kind: TraefikService\\r\\n  tls:\\r\\n    secretName: local-kasj-live-tls\\r\\n```\\r\\n\\r\\n## And the results\\r\\n\\r\\nSo now if I navigate to `https://traefik.local.kasj.live` I can not see the traefik dashboard\\r\\n\\r\\n![traefik](traefik.png)\\r\\n\\r\\nAnd more importantly with a certificate issued from Let\'s Encrypt!\\r\\n\\r\\n![cert](cert.png)"},{"id":"cert-manager","metadata":{"permalink":"/kasj-live/blog/cert-manager","source":"@site/blog/2023-02-15-certmanager/index.md","title":"Certificate manager for cluster","description":"Certificates in K3s","date":"2023-02-15T00:00:00.000Z","formattedDate":"February 15, 2023","tags":[{"label":"cert-manager","permalink":"/kasj-live/blog/tags/cert-manager"},{"label":"kubernetes","permalink":"/kasj-live/blog/tags/kubernetes"}],"readingTime":0.855,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"cert-manager","title":"Certificate manager for cluster","authors":["kas"],"tags":["cert-manager","kubernetes"]},"prevItem":{"title":"Certificates for HTTPS","permalink":"/kasj-live/blog/certs"},"nextItem":{"title":"Cluster reverse proxy","permalink":"/kasj-live/blog/traefik"}},"content":"## Certificates in K3s\\r\\n\\r\\nIn my previous post I mentioned that Traefik allows me to provide SSL termination certificate handling. The thing is certificates are actually an unknown resource type in the kubernetes ecosystem like \\"pods\\" or \\"services\\". \\r\\n\\r\\n[cert-manager](https://cert-manager.io/) adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates.\\r\\n\\r\\n![certmanager](https://cert-manager.io/images/high-level-overview.svg)\\r\\n\\r\\n## Installing cert-manager\\r\\n\\r\\nAdd customer resource definition (CRD) using a manifest from cert-manager:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml\\r\\n```\\r\\n\\r\\nLike with traefik, I also created a `values.yaml` file for the helm installation:\\r\\n\\r\\n```yaml title=\\"values.yaml\\"\\r\\ninstallCRDs: false # Oops didn\'t realise I could do it here\\r\\nreplicaCount: 1\\r\\nextraArgs:\\r\\n  - --dns01-recursive-nameservers=1.1.1.1:53,9.9.9.9:53\\r\\n  - --dns01-recursive-nameservers-only\\r\\npodDnsPolicy: None\\r\\npodDnsConfig:\\r\\n  nameservers:\\r\\n    - \\"1.1.1.1\\"\\r\\n    - \\"9.9.9.9\\"\\r\\n```\\r\\nCreate namespace, add the repo and update the repo\\r\\n\\r\\n```bash\\r\\nkubectl create namespace cert-manager\\r\\nhelm repo add jetstack https://charts.jetstack.io\\r\\nhelm repo update\\r\\n```\\r\\n\\r\\nInstall cert-manager via helm\\r\\n\\r\\n```bash\\r\\nhelm install cert-manager jetstack/cert-manager --namespace cert-manager --values=values.yaml --version v1.11.0\\r\\n```\\r\\n\\r\\nWith cert-manager now installed it was time get some certificates!"},{"id":"traefik","metadata":{"permalink":"/kasj-live/blog/traefik","source":"@site/blog/2023-02-13-traefik/index.md","title":"Cluster reverse proxy","description":"Now that I have load balancer to expose my services externally, I have a couple of options:","date":"2023-02-13T00:00:00.000Z","formattedDate":"February 13, 2023","tags":[{"label":"reverse-proxy","permalink":"/kasj-live/blog/tags/reverse-proxy"},{"label":"traefik","permalink":"/kasj-live/blog/tags/traefik"},{"label":"kubernetes","permalink":"/kasj-live/blog/tags/kubernetes"}],"readingTime":2.065,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"traefik","title":"Cluster reverse proxy","authors":["kas"],"tags":["reverse-proxy","traefik","kubernetes"]},"prevItem":{"title":"Certificate manager for cluster","permalink":"/kasj-live/blog/cert-manager"},"nextItem":{"title":"Cluster load balancer","permalink":"/kasj-live/blog/metallb"}},"content":"Now that I have load balancer to expose my services externally, I have a couple of options:\\r\\n\\r\\n* Expose every service I deploy over metallb (ie. each app gets its own IP address) or;\\r\\n* Deploy a **reverse proxy** which intercepts and routes every incoming request to the corresponding backend services.\\r\\n\\r\\nFrom the title, you can tell which option I went with. I went with the reverse proxy option because\\r\\n\\r\\n* I don\'t know how many applications I will eventually host\\r\\n* I also don\'t need to think about which application is associated with which IP and configure DNS routes etc\\r\\n* It can also provide SSL termination and can be used with an ACME provider (like Let\u2019s Encrypt) for automatic certificate generation (which I\'ll cover in a future post)\\r\\n\\r\\n## Installing Traefik\\r\\n\\r\\nLike Metallb, there are heaps of reverse proxy options out there but I went with a popular option [Traefik](https://traefik.io/traefik/).\\r\\n\\r\\n![traefik](https://traefik.io/static/83ea42c9e8101dcf2a16f380fe3aac08/053ba/diagram.webp)\\r\\n\\r\\nI wanted to try installing this via helm this time. Helm allows you specify custom configuration values via a `values.yaml` file so I did that first. I know its quite long but I just tweaked the defaults:\\r\\n\\r\\n```yaml title=\\"values.yaml\\"\\r\\nglobalArguments:\\r\\n  - \\"--global.sendanonymoususage=false\\"\\r\\n  - \\"--global.checknewversion=false\\"\\r\\n\\r\\nadditionalArguments:\\r\\n  - \\"--serversTransport.insecureSkipVerify=true\\"\\r\\n  - \\"--log.level=INFO\\"\\r\\n\\r\\ndeployment:\\r\\n  enabled: true\\r\\n  replicas: 1\\r\\n  annotations: {}\\r\\n  podAnnotations: {}\\r\\n  additionalContainers: []\\r\\n  initContainers: []\\r\\n\\r\\nports:\\r\\n  web:\\r\\n    redirectTo: websecure\\r\\n  websecure:\\r\\n    tls:\\r\\n      enabled: true\\r\\n\\r\\ningressRoute:\\r\\n  dashboard:\\r\\n    enabled: false\\r\\n\\r\\nproviders:\\r\\n  kubernetesCRD:\\r\\n    enabled: true\\r\\n    ingressClass: traefik-external\\r\\n    allowExternalNameServices: true\\r\\n  kubernetesIngress:\\r\\n    enabled: true\\r\\n    allowExternalNameServices: true\\r\\n    publishedService:\\r\\n      enabled: false\\r\\n\\r\\nrbac:\\r\\n  enabled: true\\r\\n\\r\\nservice:\\r\\n  enabled: true\\r\\n  type: LoadBalancer\\r\\n  annotations: {}\\r\\n  labels: {}\\r\\n  spec:\\r\\n    loadBalancerIP: 192.168.86.100 # this should be an IP in the MetalLB range\\r\\n  loadBalancerSourceRanges: []\\r\\n  externalIPs: []\\r\\n```\\r\\n\\r\\nThen I needed to execute these commands to install via helm (after installing [helm](https://helm.sh/) of course):\\r\\n\\r\\nAdd repo\\r\\n```bash\\r\\nhelm repo add traefik https://helm.traefik.io/traefik\\r\\n```\\r\\n\\r\\nUpdate repo\\r\\n```bash \\r\\nhelm repo update\\r\\n```\\r\\nCreate namespace\\r\\n```bash\\r\\nkubectl create namespace traefik\\r\\n```\\r\\nFinally install using helm and our custom values file:\\r\\n```bash\\r\\nhelm install --namespace=traefik traefik traefik/traefik --values=values.yaml\\r\\n```\\r\\n\\r\\n## Verifying installation\\r\\n\\r\\nFinally it was time to check if installation succeeded. \\r\\n\\r\\n![traefikverify](traefikverify.png)\\r\\n\\r\\nWhat a beautiful sight, it is all working. The main thing I was happy to see was that Metallb did the job too by assigning the IP `192.168.86.100` to the traefik service. This means I can now route all incoming request (regardless of which application) to this IP and traefik will handle all the routing. This will be done through domain names which will be covered in a later post."},{"id":"metallb","metadata":{"permalink":"/kasj-live/blog/metallb","source":"@site/blog/2023-02-10-metallb/index.md","title":"Cluster load balancer","description":"So now I have a cluster - woot! My first thing was to get stuck in and deploying some apps but quickly realised there were a couple of other things that needed to be considered. Say I deployed a web server to my cluster using a small nginx container. It\'s up and running but how do I access it when it is only routable within my cluster. if you look at the pods IP addresses, they are all 10.1.x.x which is not in my home network.","date":"2023-02-10T00:00:00.000Z","formattedDate":"February 10, 2023","tags":[{"label":"loadbalancer","permalink":"/kasj-live/blog/tags/loadbalancer"},{"label":"metallb","permalink":"/kasj-live/blog/tags/metallb"},{"label":"kubernetes","permalink":"/kasj-live/blog/tags/kubernetes"}],"readingTime":2.99,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"metallb","title":"Cluster load balancer","authors":["kas"],"tags":["loadbalancer","metallb","kubernetes"]},"prevItem":{"title":"Cluster reverse proxy","permalink":"/kasj-live/blog/traefik"},"nextItem":{"title":"Kubernetes cluster - K3s","permalink":"/kasj-live/blog/k3s"}},"content":"So now I have a cluster - woot! My first thing was to get stuck in and deploying some apps but quickly realised there were a couple of other things that needed to be considered. Say I deployed a web server to my cluster using a small nginx container. It\'s up and running but how do I access it when it is only routable within my cluster. if you look at the pods IP addresses, they are all *10.1.x.x* which is not in my home network.\\r\\n\\r\\nWell, the answer is I need use a load balancer to expose that web server outside the cluster so that I can see it on my home network. When working in public cloud, these load balancers are usually provided by the cloud providers but I need one for my locally hosted environment.\\r\\n\\r\\nAfter a bit of research, I found that [metallb](https://metallb.universe.tf/) is the best solution for this. You give it a \\"pool\\" of IP addresses within your home network to allocate to services that you want to expose and it just does it (much like a DHCP server)\\r\\n\\r\\n## Installing applications\\r\\n\\r\\nSo this is my first app that I am going to install on my cluster so it took me a little bit of reading to get to this point but here are my key takeaways of installing this and any app:\\r\\n\\r\\n* You can specify kubernetes a *manifest* which is basically a yaml file which allows you to declaritively specify what you want to install, where to install it from and what configurations you want and how to expose it.\\r\\n* Most container applications are containerised with docker and often come with an associated docker-compose file. There is a nifty tool called [kompose](https://kompose.io/) which allows you to take these docker-compose files and it converts it to a kubernetes manifest for you to allow it to be deployed to your cluster - I plan on using this a lot.\\r\\n* Another popular way of installing application is Helm. Helm is a package manager similar to apt (if you\'re familiar with Ubuntu) which allows you to easily install applications on to your cluster. All you need to do is specify the repo for the application you are wanting to install and it does the rest - I plan on using this a lot too.\\r\\n\\r\\n## Installing metallb\\r\\n\\r\\nInstalling metallb is pretty easy out of the box. You are already provided with manifest to deploy using the **kubectl apply** command:\\r\\n\\r\\n```bash\\r\\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.9/config/manifests/metallb-native.yaml\\r\\n```\\r\\n\\r\\nThis installs metallb into a new **namespace** called **metallb-system**. Namespaces are a kubenetes construct that basically allow you a way to organise resources within your cluster. I like to think of them as \\"folders\\" in a typical file system. So for metallb, all my resources will live in the metallb-system namespace. This allows for easy troubleshooting in the future as I know where they all live.\\r\\n\\r\\n\\r\\n## Configuring metallb\\r\\n\\r\\nOnce installed, there were some configuration changes that needed to be made. As mentioned earlier, I needed to specify a pool of IP address for metallb to allocate out. I put this into another yaml file:\\r\\n\\r\\n```yaml title=\\"/home-lab/cluster-setup/metallb/metallb-ipconfig.yaml\\"\\r\\napiVersion: metallb.io/v1beta1\\r\\nkind: IPAddressPool\\r\\nmetadata:\\r\\n  name: first-pool\\r\\n  namespace: metallb-system\\r\\nspec:\\r\\n  addresses:\\r\\n  - 192.168.86.100-192.168.86.110\\r\\n\\r\\n---\\r\\napiVersion: metallb.io/v1beta1\\r\\nkind: L2Advertisement\\r\\nmetadata:\\r\\n  name: default\\r\\n  namespace: metallb-system\\r\\n```\\r\\n\\r\\n## Verifying installation\\r\\n\\r\\nAll done! Here are a few commands to verify my install:\\r\\n\\r\\n![metallbverify](metallbverify.png)\\r\\n\\r\\nBut the real test is if it will allocate an IP to a service. Let\'s test it with reverse proxy service. Stay tuned as I will cover this in my next post!"},{"id":"k3s","metadata":{"permalink":"/kasj-live/blog/k3s","source":"@site/blog/2023-01-25-k3s/index.md","title":"Kubernetes cluster - K3s","description":"So with my hardware set up, it was time to get my software up and running. One of the main objectives of setting up this homelab was to get familiar with kubernetes so we need to get a cluster up and running so I can do more than this:","date":"2023-01-25T00:00:00.000Z","formattedDate":"January 25, 2023","tags":[{"label":"k8s","permalink":"/kasj-live/blog/tags/k-8-s"},{"label":"k3s","permalink":"/kasj-live/blog/tags/k-3-s"},{"label":"kubernetes","permalink":"/kasj-live/blog/tags/kubernetes"}],"readingTime":2.695,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"k3s","title":"Kubernetes cluster - K3s","authors":["kas"],"tags":["k8s","k3s","kubernetes"]},"prevItem":{"title":"Cluster load balancer","permalink":"/kasj-live/blog/metallb"},"nextItem":{"title":"Gear up","permalink":"/kasj-live/blog/hardware"}},"content":"So with my hardware set up, it was time to get my software up and running. One of the main objectives of setting up this homelab was to get familiar with kubernetes so we need to get a cluster up and running so I can do more than this:\\r\\n\\r\\n![dilbert](https://pbs.twimg.com/media/EDrZEKCWwAAG_Ty.jpg)\\r\\n\\r\\n## Installing an OS\\r\\n\\r\\nI needed to get an OS installed on my NUC before anything else. There are plenty of open source options out there but I stuck with trusty [Ubuntu Server 22.04.1 LTS ](https://ubuntu.com/download/server)\\r\\n\\r\\n## K8s vs K3s\\r\\n\\r\\nBefore I got stuck into deploying my kubernetes I wanted to investigate what options I had for a homelab. It boiled down to two main ones: K8s vs K3s. Both K8s and K3s share the same source code but the key difference for me was that K3s was significantly more lightweight, can be deployed much faster and still all all the key capabilities of K8s. There are a number of \\"production grade\\" features that are excluded from K3s such has handling of complex applications and intergrations with public cloud providers which I didn\'t require.\\r\\n\\r\\n## Installing K3s\\r\\n\\r\\nInstalling K3s couldn\'t be more easier out of the box and it takes no time at all. I simply needed to ssh into my freshly install ubuntu server and execute the following command:\\r\\n\\r\\n```bash\\r\\ncurl -sfL https://get.k3s.io | sh - \\r\\n```\\r\\n\\r\\nand to uninstall it is:\\r\\n\\r\\n```bash\\r\\n/usr/local/bin/k3s-uninstall.sh\\r\\n```\\r\\n\\r\\nI must admit I ran these commands **ALOT** because there were a number of things that were installed by default which I didn\'t need (yet). I\'m not going to get into the various customisable configuration options here but there is some pretty good [documentation](https://docs.k3s.io/installation/configuration) for it. After tweaking my configuration, I ended up with the following command to install the cluster I wanted:\\r\\n\\r\\n```bash\\r\\ncurl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=\\"644\\" INSTALL_K3S_EXEC=\\"--disable traefik --disable servicelb --disable kube-proxy --disable local-storage --cluster-init --tls-san 10.43.0.1\\" sh -s -\\r\\n```\\r\\n\\r\\n## Accessing my K3s cluster\\r\\n\\r\\nOk time to run my first kubectl command. To verify that everything was running properly I run:\\r\\n\\r\\n```bash\\r\\nsudo kubectl get nodes\\r\\n```\\r\\n\\r\\nwhich shows me my single node in my cluster is up and running:\\r\\n\\r\\n![getnodes](./getnodes.png)\\r\\n\\r\\nI needed to run it in sudo which I thought was annoying -I had to fix this (OCD much?). The K3s kubeconfig file is stored at a rancher location /etc/rancher/k3s. \\r\\nI *think* this is why I needed to run kubectl in sudo. So I ran the following steps to rectify that:\\r\\n\\r\\nCreate .kube directory in my home directory\\r\\n\\r\\n```bash\\r\\nsudo mkdir /home/kas/.kube\\r\\n```\\r\\n\\r\\nCopy the kubeconfig file into the newly created directory\\r\\n\\r\\n```bash\\r\\nsudo cp /etc/rancher/k3s/k3s.yaml /home/kas/.kube/config\\r\\n```\\r\\n\\r\\nChange ownership of the directory so that root wasn\'t needed\\r\\n```bash\\r\\nsudo chown kas:kas /home/kas/.kube/config\\r\\n```\\r\\nLet K3s know the location of the new config file (and hopefully the last time I have to use sudo for kubectl)\\r\\n\\r\\n```bash\\r\\nsudo kubectl config set-cluster default --server=https://192.168.86.41:6443 --kubeconfig /home/kas/.kube/config\\r\\n```\\r\\n\\r\\nI wanted to ensure I could access my cluster from my laptop without having to SSH into my ubuntu server (k3smaster) everytime. To do this I needed copy the kubeconfig file across to my laptop using scp:\\r\\n\\r\\nFrom my laptop I run:\\r\\n\\r\\n```bash\\r\\nscp k3smaster:/home/kas/.kube/config /home/kas/.kube/config\\r\\n```\\r\\n\\r\\n...and I\'m laughing::\\r\\n\\r\\n![getnodes](./getnodes-lappa.png)"},{"id":"hardware","metadata":{"permalink":"/kasj-live/blog/hardware","source":"@site/blog/2023-01-20-hardware/index.md","title":"Gear up","description":"I\'ve normally resorted to buying raspberry pi\'s (I now have a Model 2B, 3B and 4) and don\'t have any major self-hosting requirements so I considered clustering them together. Given the current ARM architecture limitations on the older models, I decided I will bite the bullet and buy some more dedicated hardware. I also figured I could:","date":"2023-01-20T00:00:00.000Z","formattedDate":"January 20, 2023","tags":[{"label":"homelab","permalink":"/kasj-live/blog/tags/homelab"},{"label":"self-hosting","permalink":"/kasj-live/blog/tags/self-hosting"},{"label":"nuc","permalink":"/kasj-live/blog/tags/nuc"},{"label":"hardware","permalink":"/kasj-live/blog/tags/hardware"}],"readingTime":1.1,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"hardware","title":"Gear up","authors":["kas"],"tags":["homelab","self-hosting","nuc","hardware"]},"prevItem":{"title":"Kubernetes cluster - K3s","permalink":"/kasj-live/blog/k3s"},"nextItem":{"title":"Clean up","permalink":"/kasj-live/blog/cable-management"}},"content":"I\'ve normally resorted to buying raspberry pi\'s (I now have a Model 2B, 3B and 4) and don\'t have any major self-hosting requirements so I considered clustering them together. Given the current ARM architecture limitations on the older models, I decided I will bite the bullet and buy some more dedicated hardware. I also figured I could:\\r\\n\\r\\n* Add the raspberry pi\'s into the cluster for some more resources if need be at a later date. \\r\\n* Use the raspberry pi\'s as an isolated sandbox for testing\\r\\n\\r\\nWith Raspberry Pi 4\'s currently in low stocks, I started exploring mini PCs/NUCs. They are actually pretty cool, the specs are much better, the costs aren\'t that much higher and they are built to last.\\r\\n\\r\\nI ended up getting [Intel NUC 11 Essential Kit Celeron N4505 (Atlas Canyon)](https://www.centrecom.com.au/intel-nuc-11-essential-kit-celeron-n4505-atlas-canyon) which was on special at CentreCom. I unboxed and plugged it in immediately only to realise that it is pretty barebones unfortunately. \\r\\n\\r\\n![NUC](https://cdn1.centrecom.com.au/images/upload/0135473_0.jpeg)\\r\\n\\r\\nThe site doesn\'t cover it but it doesn\'t come with any pre-installed HDD or RAM (that\'s why it was cheap!) so I needed to get those off Amazon. Here\'s what I bought:\\r\\n\\r\\n2 X [8GB DDR4 RAM](https://www.amazon.com.au/dp/B08C4Z69LN?psc=1&ref=ppx_yo2ov_dt_b_product_details)\\r\\n  \\r\\n  ![RAM](https://m.media-amazon.com/images/I/71exOjbZWiL._AC_SX679_.jpg)\\r\\n\\r\\n1 x [500GB SSD Hard Drive](https://m.media-amazon.com/images/I/418VuyafoUL._AC_SL1075_.jpg)\\r\\n  \\r\\n  ![HDD](https://cdn.mwave.com.au/images/400/crucial_p5_plus_500gb_nvme_m2_pcie_3d_nand_ssd_ct500p5pssd8_ac46349.jpg)\\r\\n\\r\\n\\r\\nInstalling them were pretty easy - plug n play, I was then ready to rock n roll!"},{"id":"cable-management","metadata":{"permalink":"/kasj-live/blog/cable-management","source":"@site/blog/2023-01-17-cables/index.md","title":"Clean up","description":"So first things first, just like a chef needs to keep their bench clean, think this is the perfect time to clean up my office table. More importantly this cable situation that has been driving me INSANE","date":"2023-01-17T00:00:00.000Z","formattedDate":"January 17, 2023","tags":[{"label":"cable-management","permalink":"/kasj-live/blog/tags/cable-management"},{"label":"desk","permalink":"/kasj-live/blog/tags/desk"}],"readingTime":0.565,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"cable-management","title":"Clean up","authors":["kas"],"tags":["cable-management","desk"]},"prevItem":{"title":"Gear up","permalink":"/kasj-live/blog/hardware"},"nextItem":{"title":"Welcome","permalink":"/kasj-live/blog/welcome"}},"content":"So first things first, just like a chef needs to keep their bench clean, think this is the perfect time to clean up my office table. More importantly this cable situation that has been driving me **INSANE**\\r\\n\\r\\n![Untidy Cables](./untidy_cables.jpg)\\r\\n\\r\\n### Cable Management\\r\\n\\r\\nI\'ve had a couple of attempts at cable management but it has always been *half-arsed* and heavy on the duct tape. It was time to do this properly. I bought a couple of [cable cradles](https://www.amazon.com.au/gp/product/B09NVYV5NB/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1) from Amazon that fit nicely under the table. From there it was relativey easy to run all the cables and extension cords through. Here\'s the final result:\\r\\n\\r\\n![Tidy Cables 1](./tidycable_1.jpg)\\r\\n![Tidy Cables 2](./tidycable_2.jpg)\\r\\n![Tidy Cables 3](./tidycable_3.jpg)"},{"id":"welcome","metadata":{"permalink":"/kasj-live/blog/welcome","source":"@site/blog/2023-01-15-welcome/index.md","title":"Welcome","description":"I\'ve been dabbling with a few self hosted services on my laptop or a raspberry pi for a while now but I now have a need to run some of these services on going. I\'ve also wanted to become more comfortable with kubernetes administration so this is also a great opportunity for me to learn something but also run a few practical services at home.","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[{"label":"homelab","permalink":"/kasj-live/blog/tags/homelab"},{"label":"self-hosting","permalink":"/kasj-live/blog/tags/self-hosting"}],"readingTime":0.975,"hasTruncateMarker":false,"authors":[{"name":"Kas J","title":"Author","url":"https://github.com/kasjayatissa","imageURL":"https://avatars.githubusercontent.com/u/90017589?v=4","key":"kas"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["kas"],"tags":["homelab","self-hosting"]},"prevItem":{"title":"Clean up","permalink":"/kasj-live/blog/cable-management"}},"content":"I\'ve been dabbling with a few self hosted services on my laptop or a raspberry pi for a while now but I now have a need to run some of these services on going. I\'ve also wanted to become more comfortable with kubernetes administration so this is also a great opportunity for me to learn something but also run a few practical services at home.\\r\\n\\r\\nThere are some amazing resources available that I have been leaning on heavily but I find writing things down will help make some of the key concepts stick. I\'m hoping I can then transfer some of these skills to my work and future projects.\\r\\n\\r\\nI wanted to give a shout out to [technotim](https://www.youtube.com/@technotim) and [noted.lol](https://noted.lol/) who I\'ve drawn a lot of inspiration from for a number of my services.\\r\\n\\r\\nFull disclosure, I\'m not one to write blogs so this is a bit of a challenge in itself. I\'ve given myself a bit of license to be a keep things a bit rough as I write to keep myself motivated to continue to post regularly.\\r\\n\\r\\nIf you\'re interested feel free to read through my posts and head over to my [docs](/docs/intro)"}]}')}}]);