"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[1584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5},l="Let's Encrypt",s={unversionedId:"homelab-services/letsencrypt",id:"homelab-services/letsencrypt",title:"Let's Encrypt",description:"LetsEncrypt is a nonprofit Certificate Authority that provides free TLS certificates to millions of websites all around the world.",source:"@site/docs/01-homelab-services/05-letsencrypt.md",sourceDirName:"01-homelab-services",slug:"/homelab-services/letsencrypt",permalink:"/kasj-live/docs/homelab-services/letsencrypt",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Cert Manager",permalink:"/kasj-live/docs/homelab-services/certmanager"},next:{title:"Traefik Dashboard",permalink:"/kasj-live/docs/homelab-services/traefikdash"}},o={},c=[{value:"Connect a domain from CloudFlare",id:"connect-a-domain-from-cloudflare",level:2},{value:"Adding Let&#39;s Encrypt as an Issuer to cert-manager",id:"adding-lets-encrypt-as-an-issuer-to-cert-manager",level:2},{value:"Issuing certificates",id:"issuing-certificates",level:2},{value:"Update since 21/03/2023",id:"update-since-21032023",level:2},{value:"Testing the new solution",id:"testing-the-new-solution",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lets-encrypt"},"Let's Encrypt"),(0,r.kt)("p",null,"LetsEncrypt is a nonprofit Certificate Authority that provides free TLS certificates to millions of websites all around the world."),(0,r.kt)("h2",{id:"connect-a-domain-from-cloudflare"},"Connect a domain from CloudFlare"),(0,r.kt)("p",null,"Providing cert-manager my cloudflare token could be done with a simple manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=secret-cf-token.yaml",title:"secret-cf-token.yaml"},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-token-secret\n  namespace: cert-manager\ntype: Opaque\nstringData:\n  cloudflare-token: <redacted>\n")),(0,r.kt)("p",null,"To apply the manifest run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f secret-cf-token.yaml\n")),(0,r.kt)("h2",{id:"adding-lets-encrypt-as-an-issuer-to-cert-manager"},"Adding Let's Encrypt as an Issuer to cert-manager"),(0,r.kt)("p",null,"I now need to let cert-manager know that I'll be using Let's Encrypt as my certificate issuer of choice through another manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="letsencrypt-production.yaml"',title:'"letsencrypt-production.yaml"'},'apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-production\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: kasunj@gmail.com\n    privateKeySecretRef:\n      name: letsencrypt-production\n    solvers:\n      - dns01:\n          cloudflare:\n            email: kasunj@gmail.com\n            apiTokenSecretRef:\n              name: cloudflare-token-secret\n              key: cloudflare-token\n        selector:\n          dnsZones:\n            - "kasj.live"\n')),(0,r.kt)("p",null,"and execute using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f letsencrypt-production.yaml\n")),(0,r.kt)("h2",{id:"issuing-certificates"},"Issuing certificates"),(0,r.kt)("p",null,"The certificate is issued with the following manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="local-kasj-live.yaml"',title:'"local-kasj-live.yaml"'},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: local-kasj-live\n  namespace: default\nspec:\n  secretName: local-kasj-live-tls\n  issuerRef:\n    name: letsencrypt-production\n    kind: ClusterIssuer\n  commonName: "*.local.kasj.live"\n  dnsNames:\n  - "local.kasj.live"\n  - "*.local.kasj.live"\n')),(0,r.kt)("p",null,"and execute using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f local-kasj-live.yaml\n")),(0,r.kt)("p",null,"Issuing  and validating the certificates takes time (20 minutes minimum). To check how things are progressing run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get challenges\n")),(0,r.kt)("h2",{id:"update-since-21032023"},"Update since 21/03/2023"),(0,r.kt)("p",null,"Traefik by default normally uses its own self-signed certificate for each ingress service that you define. What I needed to configure was something to tell Traefik to serve the new wildcard certifate I'd created instead. This can be done through a kubernetes resource called ",(0,r.kt)("strong",{parentName:"p"},"TLSStore"),". "),(0,r.kt)("p",null,"Create a TLSStore resource with the name  ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),". According to the article above, it needed to be called default to be picked up by Traefik by default:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/home-lab/cluster-setup/cert-manager/tls-store.yaml"',title:'"/home-lab/cluster-setup/cert-manager/tls-store.yaml"'},'---\napiVersion: traefik.containo.us/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: kube-system\nspec:\n  defaultCertificate:\n    secretName: wildcard-home-kasj-live-tls"\n')),(0,r.kt)("p",null,"Restart Traefik deployment so that it knows to pick up the new cert by default"),(0,r.kt)("h2",{id:"testing-the-new-solution"},"Testing the new solution"),(0,r.kt)("p",null,"To test if Traefik was issuing my new wildcard certificate by default, I created a simple nginx server and exposed it using the following manifest on ",(0,r.kt)("inlineCode",{parentName:"p"},"test.home.kasj.live"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/home-lab/prod-apps/nginx/ingress.yaml"',title:'"/home-lab/prod-apps/nginx/ingress.yaml"'},"---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx\n  namespace: nginx\n  annotations:\n    kubernetes.io/ingress.class: traefik\n    traefik.ingress.kubernetes.io/redirect-entry-point: https\nspec:\n  rules:\n    - host: test.home.kasj.live\n      http:\n        paths:\n          - backend:\n              service:\n                name: nginx\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n")))}m.isMDXComponent=!0}}]);