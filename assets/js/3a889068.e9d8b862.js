"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[5686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6883:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:8},r="Pihole",l={unversionedId:"homelab-services/pihole",id:"homelab-services/pihole",title:"Pihole",description:"Pihole manifests for deployment",source:"@site/docs/01-homelab-services/08-pihole.md",sourceDirName:"01-homelab-services",slug:"/homelab-services/pihole",permalink:"/kasj-live/docs/homelab-services/pihole",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"NFS Persistent Volumes Provisioner",permalink:"/kasj-live/docs/homelab-services/nfs"},next:{title:"Adguard",permalink:"/kasj-live/docs/homelab-services/adguard"}},s={},p=[{value:"Namespace",id:"namespace",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Service",id:"service",level:2}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pihole"},"Pihole"),(0,o.kt)("p",null,"Pihole manifests for deployment"),(0,o.kt)("h2",{id:"namespace"},"Namespace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="01-pihole-namespaces.yaml"',title:'"01-pihole-namespaces.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: pihole\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="02-pihole-configs.yaml"',title:'"02-pihole-configs.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: custom.list\n  namespace: pihole\ndata:\n  custom.list: |\n    192.168.86.41 k3smaster\n    192.168.86.40 k3snode01\n    192.168.86.100 traefik.local.kasj.live\n    192.168.86.101 pihole.local.kasj.live\n    192.168.86.100 dash.local.kasj.live\n    192.168.86.100 grocy.local.kasj.live\n    192.168.86.100 kuma.local.kasj.live\n    192.168.86.100 cloud.local.kasj.live\n    192.168.86.100 portainer.local.kasj.live\n    192.168.86.100 argocd.local.kasj.live\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: adlists.list\n  namespace: pihole\ndata:\n  adlists.list: |\n    https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\n    https://adaway.org/hosts.txt\n    https://v.firebog.net/hosts/AdguardDNS.txt\n    https://v.firebog.net/hosts/Admiral.txt\n    https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt\n    https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt\n    https://v.firebog.net/hosts/Easylist.txt\n    https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext\n    https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\n    https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts\n    https://v.firebog.net/hosts/static/w3kbl.txt\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: whitelist.txt\n  namespace: pihole\ndata:\n  whitelist.txt: |\n    ichnaea.netflix.com\n    nrdp.nccp.netflix.com\n    androidtvchannels-pa.googleapis.com\n    lcprd1.samsungcloudsolution.net\n")),(0,o.kt)("h2",{id:"deployment"},"Deployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="03-pihole-deployment.yaml"',title:'"03-pihole-deployment.yaml"'},'as@lappa:~$ cat home-lab/prod-apps/pihole/03-pihole-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: pihole\n  name: pihole\n  namespace: pihole\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: pihole\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: pihole\n    spec:\n      containers:\n      - env:\n        - name: TZ\n          value: Australia/Melbourne\n        - name: WEBPASSWORD\n          value:\n        - name: DNS1\n          value: 9.9.9.9\n        - name: DNS2\n          value: 1.1.1.1\n        image: pihole/pihole:latest\n        imagePullPolicy: IfNotPresent\n        name: pihole\n        ports:\n        - name: dns-tcp\n          containerPort: 53\n          protocol: TCP\n        - name: dns-udp\n          containerPort: 53\n          protocol: UDP\n        - name: dhcp\n          containerPort: 67\n          protocol: UDP\n        - name: web\n          containerPort: 80\n          protocol: TCP\n        - name: https\n          containerPort: 443\n          protocol: TCP\n        resources:\n          requests:\n            cpu: "20m"\n            memory: "512Mi"\n          limits:\n            cpu: "250m"\n            memory: "896Mi"\n        readinessProbe:\n          exec:\n            command: [\'dig\', \'@127.0.0.1\', \'cnn.com\']\n          timeoutSeconds: 20\n          initialDelaySeconds: 5\n          periodSeconds: 60\n        livenessProbe:\n          tcpSocket:\n            port: dns-tcp\n          initialDelaySeconds: 15\n          periodSeconds: 30\n        volumeMounts:\n        - name: etc-pihole\n          mountPath: /etc/pihole\n        - name: etc-dnsmasq\n          mountPath: /etc/dnsmasq.d\n        - name: var-log\n          mountPath: /var/log\n        - name: var-log-lighttpd\n          mountPath: /var/log/lighttpd\n        - name: adlists\n          mountPath: /etc/pihole/adlists.list\n          subPath: adlists.list\n        - name: customlist\n          mountPath: /etc/pihole/custom.list\n          subPath: custom.list\n      restartPolicy: Always\n      volumes:\n      - name: etc-pihole\n        emptyDir:\n          medium: Memory\n      - name: etc-dnsmasq\n        emptyDir:\n          medium: Memory\n      - name: var-log\n        emptyDir:\n          medium: Memory\n      - name: var-log-lighttpd\n        emptyDir:\n          medium: Memory\n      - name: adlists\n        configMap:\n          name: adlists.list\n          items:\n            - key: adlists.list\n              path: adlists.list\n      - name: customlist\n        configMap:\n          name: custom.list\n          items:\n            - key: custom.list\n              path: custom.list\n')),(0,o.kt)("h2",{id:"service"},"Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="04-pihole-service.yaml"',title:'"04-pihole-service.yaml"'},"kind: Service\napiVersion: v1\nmetadata:\n  name: pihole-udp\n  namespace: pihole\n  annotations:\n    metallb.universe.tf/allow-shared-ip: dns\nspec:\n  selector:\n    app: pihole\n  ports:\n  - protocol: UDP\n    port: 53\n    name: dnsudp\n    targetPort: 53\n  type: LoadBalancer\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: pihole-tcp\n  namespace: pihole\n  annotations:\n    metallb.universe.tf/allow-shared-ip: dns\nspec:\n  selector:\n    app: pihole\n  ports:\n  - protocol: TCP\n    port: 53\n    name: dnstcp\n    targetPort: 53\n  - protocol: TCP\n    port: 80\n    name: web\n    targetPort: 80\n  type: LoadBalancer\n")))}d.isMDXComponent=!0}}]);