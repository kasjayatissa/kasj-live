"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[6254],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,f=u["".concat(o,".").concat(d)]||u[d]||m[d]||l;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9626:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:3},i="Traefik",s={unversionedId:"homelab-services/traefik",id:"homelab-services/traefik",title:"Traefik",description:"Traefik deploys a reverse proxy which intercepts and routes every incoming request to the corresponding backend services. It can also provide SSL termination and can be used with an ACME provider (like Let\u2019s Encrypt) for automatic certificate generation.",source:"@site/docs/01-homelab-services/03-traefik.md",sourceDirName:"01-homelab-services",slug:"/homelab-services/traefik",permalink:"/kasj-live/docs/homelab-services/traefik",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Metallb",permalink:"/kasj-live/docs/homelab-services/metallb"},next:{title:"Cert Manager",permalink:"/kasj-live/docs/homelab-services/certmanager"}},o={},c=[{value:"Installing Traefik",id:"installing-traefik",level:2},{value:"Configuring Traefik",id:"configuring-traefik",level:2},{value:"Verifying installation",id:"verifying-installation",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"traefik"},"Traefik"),(0,r.kt)("p",null,"Traefik deploys a ",(0,r.kt)("strong",{parentName:"p"},"reverse proxy")," which intercepts and routes every incoming request to the corresponding backend services. It can also provide SSL termination and can be used with an ACME provider (like Let\u2019s Encrypt) for automatic certificate generation."),(0,r.kt)("h2",{id:"installing-traefik"},"Installing Traefik"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," with install config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="values.yaml"',title:'"values.yaml"'},'globalArguments:\n  - "--global.sendanonymoususage=false"\n  - "--global.checknewversion=false"\n\nadditionalArguments:\n  - "--serversTransport.insecureSkipVerify=true"\n  - "--log.level=INFO"\n\ndeployment:\n  enabled: true\n  replicas: 1\n  annotations: {}\n  podAnnotations: {}\n  additionalContainers: []\n  initContainers: []\n\nports:\n  web:\n    redirectTo: websecure\n  websecure:\n    tls:\n      enabled: true\n\ningressRoute:\n  dashboard:\n    enabled: false\n\nproviders:\n  kubernetesCRD:\n    enabled: true\n    ingressClass: traefik-external\n    allowExternalNameServices: true\n  kubernetesIngress:\n    enabled: true\n    allowExternalNameServices: true\n    publishedService:\n      enabled: false\n\nrbac:\n  enabled: true\n\nservice:\n  enabled: true\n  type: LoadBalancer\n  annotations: {}\n  labels: {}\n  spec:\n    loadBalancerIP: 192.168.86.100 # this should be an IP in the MetalLB range\n  loadBalancerSourceRanges: []\n  externalIPs: []\n')),(0,r.kt)("p",null,"Then I needed to execute these commands to install via helm (after installing ",(0,r.kt)("a",{parentName:"p",href:"https://helm.sh/"},"helm")," of course):"),(0,r.kt)("p",null,"Add repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add traefik https://helm.traefik.io/traefik\n")),(0,r.kt)("p",null,"Update repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo update\n")),(0,r.kt)("p",null,"Create namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace traefik\n")),(0,r.kt)("p",null,"Finally install using helm and our custom values file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm install --namespace=traefik traefik traefik/traefik --values=values.yaml\n")),(0,r.kt)("h2",{id:"configuring-traefik"},"Configuring Traefik"),(0,r.kt)("p",null,"Once installed, there were some configuration changes that needed to be made. As mentioned earlier, I needed to specify a pool of IP address for metallb to allocate out. I put this into another yaml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/home-lab/cluster-setup/metallb/metallb-ipconfig.yaml"',title:'"/home-lab/cluster-setup/metallb/metallb-ipconfig.yaml"'},"apiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: first-pool\n  namespace: metallb-system\nspec:\n  addresses:\n  - 192.168.86.100-192.168.86.110\n\n---\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: default\n  namespace: metallb-system\n")),(0,r.kt)("h2",{id:"verifying-installation"},"Verifying installation"),(0,r.kt)("p",null,"Get the pods running in the ",(0,r.kt)("strong",{parentName:"p"},"metallb-system")," namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n metallb-system\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"ipaddresspool")," resource running in the ",(0,r.kt)("strong",{parentName:"p"},"metallb-system")," namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get ipaddresspool -n metallb-system\n")))}m.isMDXComponent=!0}}]);