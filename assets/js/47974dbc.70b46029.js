"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[8519],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=a,g=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},479:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:9},i="Adguard",l={unversionedId:"homelab-services/adguard",id:"homelab-services/adguard",title:"Adguard",description:"Adguard Home Manifests generated from Kompose",source:"@site/docs/01-homelab-services/09-adguard.md",sourceDirName:"01-homelab-services",slug:"/homelab-services/adguard",permalink:"/kasj-live/docs/homelab-services/adguard",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Pihole",permalink:"/kasj-live/docs/homelab-services/pihole"},next:{title:"Mealie",permalink:"/kasj-live/docs/homelab-services/mealie"}},s={},c=[{value:"Volume claims",id:"volume-claims",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Service",id:"service",level:2}],m={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adguard"},"Adguard"),(0,a.kt)("p",null,"Adguard Home Manifests generated from Kompose"),(0,a.kt)("h2",{id:"volume-claims"},"Volume claims"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-claim0-persistentvolumeclaim.yaml"',title:'"adguard-claim0-persistentvolumeclaim.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard-claim0\n  name: adguard-claim0\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\nstatus: {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-claim1-persistentvolumeclaim.yaml"',title:'"adguard-claim1-persistentvolumeclaim.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard-claim1\n  name: adguard-claim1\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\nstatus: {}\n")),(0,a.kt)("h2",{id:"deployment"},"Deployment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-deployment.yaml"',title:'"adguard-deployment.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    kompose.cmd: kompose convert\n    kompose.version: 1.26.0 (40646f47)\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard\n  name: adguard\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      io.kompose.service: adguard\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        kompose.cmd: kompose convert\n        kompose.version: 1.26.0 (40646f47)\n      creationTimestamp: null\n      labels:\n        io.kompose.service: adguard\n    spec:\n      containers:\n        - image: adguard/adguardhome\n          name: adguardhome\n          ports:\n            - containerPort: 53\n            - containerPort: 53\n              protocol: UDP\n            - containerPort: 67\n              protocol: UDP\n            - containerPort: 68\n              protocol: UDP\n            - containerPort: 80\n            - containerPort: 443\n            - containerPort: 443\n              protocol: UDP\n            - containerPort: 3000\n            - containerPort: 853\n            - containerPort: 784\n              protocol: UDP\n            - containerPort: 853\n              protocol: UDP\n            - containerPort: 8853\n              protocol: UDP\n            - containerPort: 5443\n            - containerPort: 5443\n              protocol: UDP\n          resources: {}\n          volumeMounts:\n            - mountPath: /opt/adguardhome/work\n              name: adguard-claim0\n            - mountPath: /opt/adguardhome/conf\n              name: adguard-claim1\n      restartPolicy: Always\n      volumes:\n        - name: adguard-claim0\n          persistentVolumeClaim:\n            claimName: adguard-claim0\n        - name: adguard-claim1\n          persistentVolumeClaim:\n            claimName: adguard-claim1\nstatus: {}\n")),(0,a.kt)("h2",{id:"service"},"Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-service.yaml"',title:'"adguard-service.yaml"'},'apiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kompose.cmd: kompose convert\n    kompose.version: 1.26.0 (40646f47)\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard\n  name: adguard\nspec:\n  ports:\n    - name: "53"\n      port: 53\n      targetPort: 53\n    - name: 53-udp\n      port: 53\n      protocol: UDP\n      targetPort: 53\n    - name: "67"\n      port: 67\n      protocol: UDP\n      targetPort: 67\n    - name: "68"\n      port: 68\n      protocol: UDP\n      targetPort: 68\n    - name: "80"\n      port: 80\n      targetPort: 80\n    - name: "443"\n      port: 443\n      targetPort: 443\n    - name: 443-udp\n      port: 443\n      protocol: UDP\n      targetPort: 443\n    - name: "3000"\n      port: 3000\n      targetPort: 3000\n    - name: "853"\n      port: 853\n      targetPort: 853\n    - name: "784"\n      port: 784\n      protocol: UDP\n      targetPort: 784\n    - name: 853-udp\n      port: 853\n      protocol: UDP\n      targetPort: 853\n    - name: "8853"\n      port: 8853\n      protocol: UDP\n      targetPort: 8853\n    - name: "5443"\n      port: 5443\n      targetPort: 5443\n    - name: 5443-udp\n      port: 5443\n      protocol: UDP\n      targetPort: 5443\n  type: LoadBalancer\n  selector:\n    io.kompose.service: adguard\n')))}d.isMDXComponent=!0}}]);