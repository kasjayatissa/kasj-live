"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[1261],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,h=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return a?n.createElement(h,s(s({ref:t},m),{},{components:a})):n.createElement(h,s({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7935:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={slug:"certv2",title:"Fixing my wildcard certificates",authors:["kas"],tags:["certificates","traffik","cert-manager"]},s="Fixing my wildcard certificates",l={permalink:"/kasj-live/blog/certv2",source:"@site/blog/2023-03-21-certs/index.md",title:"Fixing my wildcard certificates",description:"In an earlier post, I installed cert-manager to automatically manage my SSL certificates for TLS for my home-lab services. Given it was a set of services within my internal network, I was comfortable with issuing a single wildcard certificate *.local.kasj.live.",date:"2023-03-21T00:00:00.000Z",formattedDate:"March 21, 2023",tags:[{label:"certificates",permalink:"/kasj-live/blog/tags/certificates"},{label:"traffik",permalink:"/kasj-live/blog/tags/traffik"},{label:"cert-manager",permalink:"/kasj-live/blog/tags/cert-manager"}],readingTime:2.785,hasTruncateMarker:!1,authors:[{name:"Kas J",title:"Author",url:"https://github.com/kasjayatissa",imageURL:"https://avatars.githubusercontent.com/u/90017589?v=4",key:"kas"}],frontMatter:{slug:"certv2",title:"Fixing my wildcard certificates",authors:["kas"],tags:["certificates","traffik","cert-manager"]},prevItem:{title:"I switched to a self-hosted password manager and I'm not going back",permalink:"/kasj-live/blog/bitwarden"},nextItem:{title:"Recipe and Shopping List Management with Mealie",permalink:"/kasj-live/blog/mealie"}},o={authorsImageUrls:[void 0]},c=[{value:"The problem",id:"the-problem",level:2},{value:"The research",id:"the-research",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Testing the new solution",id:"testing-the-new-solution",level:2}],m={toc:c},p="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In an earlier post, I installed cert-manager to automatically manage my SSL certificates for TLS for my home-lab services. Given it was a set of services within my internal network, I was comfortable with issuing a single wildcard certificate ",(0,r.kt)("inlineCode",{parentName:"p"},"*.local.kasj.live"),". "),(0,r.kt)("h2",{id:"the-problem"},"The problem"),(0,r.kt)("p",null,"I've since realised a bit of an issue. The wildcard certificates that are issued are issued as a kubernetes ",(0,r.kt)("inlineCode",{parentName:"p"},"secret")," resource which is specific to a namespace. This meant that in order for me to use the wildcard cert for all my services, I needed to deploy all my services into the same namespace (not ideal). "),(0,r.kt)("h2",{id:"the-research"},"The research"),(0,r.kt)("p",null,"Turns out there were many solutions to this, many of which I don't really understand but I tried anyway. This included:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://major.io/2021/08/16/wildcard-letsencrypt-certificates-traefik-cloudflare/"},"Installing traefik again with K3s out of the box")," and getting it to issue certs through Let's Encrypt without cert-manager. This didn't seem to change the behaviour I was experiencing before."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://lachlan.io/blog/using-wildcard-certificates-with-traefik-and-k3s"},"Storing the wildcard secret in a persistent volume"),' for cert-manager to pick up as a "default" certificate when nothing else was provided. Unfortunately I couldn\'t get the persistent volume to work either')),(0,r.kt)("h2",{id:"the-solution"},"The solution"),(0,r.kt)("p",null,"I landed with a solution outline ",(0,r.kt)("a",{parentName:"p",href:"https://itobey.dev/wildcard-certificates-dns-challenges-and-traefik-in-kubernetes/"},"here")," and it still doesn't work how I want it to but its definitely a step forward. "),(0,r.kt)("p",null,"The first few steps are exactly as I'd performed in my earlier post:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install Traefik"),(0,r.kt)("li",{parentName:"ol"},"Install Cert-Manager"),(0,r.kt)("li",{parentName:"ol"},"Set up Let's Encrypt as an Issuer")),(0,r.kt)("p",null,"This is where I learnt something new:"),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Issue a wilcard certificate in the ",(0,r.kt)("strong",{parentName:"li"},"same namespace as Traefik")," in my case this was the ",(0,r.kt)("inlineCode",{parentName:"li"},"kube-system")," namespace - I also issued myself a new one here to keep things fresh ",(0,r.kt)("inlineCode",{parentName:"li"},"*.home.kasj.live"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/home-lab/cluster-setup/cert-manager/wildcard-cert.yaml"',title:'"/home-lab/cluster-setup/cert-manager/wildcard-cert.yaml"'},'---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: wildcard-home-kasj-live\n  namespace: kube-system\nspec:\n  secretName: wildcard-home-kasj-live-tls\n  issuerRef:\n    name: letsencrypt-production\n    kind: ClusterIssuer\n  # commonName: "*.home.kasj.live"\n  dnsNames:\n    - "home.kasj.live"\n    - "*.home.kasj.live"\n')),(0,r.kt)("p",null,"Traefik by default normally uses its own self-signed certificate for each ingress service that you define. What I needed to configure was something to tell Traefik to serve the new wildcard certifate I'd created instead. This can be done through a kubernetes resource called ",(0,r.kt)("strong",{parentName:"p"},"TLSStore"),". "),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Create a TLSStore resource with the name  ",(0,r.kt)("inlineCode",{parentName:"li"},"default"),". According to the article above, it needed to be called default to be picked up by Traefik by default:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/home-lab/cluster-setup/cert-manager/tls-store.yaml"',title:'"/home-lab/cluster-setup/cert-manager/tls-store.yaml"'},'---\napiVersion: traefik.containo.us/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: kube-system\nspec:\n  defaultCertificate:\n    secretName: wildcard-home-kasj-live-tls"\n')),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Restart Traefik deployment so that it knows to pick up the new cert by default")),(0,r.kt)("h2",{id:"testing-the-new-solution"},"Testing the new solution"),(0,r.kt)("p",null,"To test if Traefik was issuing my new wildcard certificate by default, I created a simple nginx server and exposed it using the following manifest on ",(0,r.kt)("inlineCode",{parentName:"p"},"test.home.kasj.live"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="//home-lab/prod-apps/nginx/ingress.yaml"',title:'"//home-lab/prod-apps/nginx/ingress.yaml"'},"---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx\n  namespace: nginx\n  annotations:\n    kubernetes.io/ingress.class: traefik\n    traefik.ingress.kubernetes.io/redirect-entry-point: https\nspec:\n  rules:\n    - host: test.home.kasj.live\n      http:\n        paths:\n          - backend:\n              service:\n                name: nginx\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n")),(0,r.kt)("p",null,"Note: I've moved away from the ",(0,r.kt)("inlineCode",{parentName:"p"},"IngressRoute")," resource to ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Success!"),"\n",(0,r.kt)("img",{alt:"nginx",src:a(8734).Z,width:"2256",height:"657"}),"\n",(0,r.kt)("img",{alt:"nginx2",src:a(5636).Z,width:"2244",height:"1204"})),(0,r.kt)("p",null,"Now earlier, I mentioned it still wasn't working as I wanted it to and that's because there is still an issue with some services that already expose their services on SSL/HTTPS (Port 443) by default like nextcloud. Stay tuned for a future post on how I tackle that one but for now I'm going to enjoy this win."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"winning",src:a(9372).Z,width:"480",height:"288"})))}d.isMDXComponent=!0},8734:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/nginx-6266320fdf4525d22d255cce5b26e63a.png"},5636:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/nginx2-4fe4d693c48feba4589a43b872645b6f.png"},9372:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/winning-f8a4eeac98483de88753548079dce266.gif"}}]);