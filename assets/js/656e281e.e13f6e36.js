"use strict";(self.webpackChunkkasj_live=self.webpackChunkkasj_live||[]).push([[3218],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||l;return t?a.createElement(g,i(i({ref:n},m),{},{components:t})):a.createElement(g,i({ref:n},m))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[d]="string"==typeof e?e:o,i[1]=r;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const l={slug:"dns",title:"Adblocker and DNS server",authors:["kas"],tags:["adguard","pihole","dns"]},i="Adblocker and DNS server",r={permalink:"/kasj-live/blog/dns",source:"@site/blog/2023-02-23-dns/index.md",title:"Adblocker and DNS server",description:"I've always been meaning to add an adblocker to my home network and now with the additional need to have internal hostnames for my services this would be a great time to put one in. There were two great open source solutions to consider:",date:"2023-02-23T00:00:00.000Z",formattedDate:"February 23, 2023",tags:[{label:"adguard",permalink:"/kasj-live/blog/tags/adguard"},{label:"pihole",permalink:"/kasj-live/blog/tags/pihole"},{label:"dns",permalink:"/kasj-live/blog/tags/dns"}],readingTime:7.09,hasTruncateMarker:!1,authors:[{name:"Kas J",title:"Author",url:"https://github.com/kasjayatissa",imageURL:"https://avatars.githubusercontent.com/u/90017589?v=4",key:"kas"}],frontMatter:{slug:"dns",title:"Adblocker and DNS server",authors:["kas"],tags:["adguard","pihole","dns"]},prevItem:{title:"Recipe and Shopping List Management with Mealie",permalink:"/kasj-live/blog/mealie"},nextItem:{title:"Persistent volumes and NFS",permalink:"/kasj-live/blog/nfs"}},s={authorsImageUrls:[void 0]},p=[{value:"Pihole",id:"pihole",level:2},{value:"Installing Pihole",id:"installing-pihole",level:3},{value:"Testing Pihole",id:"testing-pihole",level:3},{value:"Adguard Home",id:"adguard-home",level:2},{value:"Installing Adguard Home",id:"installing-adguard-home",level:3},{value:"Testing Adguard Home",id:"testing-adguard-home",level:2},{value:"Closing thoughts",id:"closing-thoughts",level:2},{value:"Appendix",id:"appendix",level:2},{value:"Pihole Manifests",id:"pihole-manifests",level:3},{value:"Namespace",id:"namespace",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Deployment",id:"deployment",level:4},{value:"Service",id:"service",level:4},{value:"Adguard Manifests",id:"adguard-manifests",level:3},{value:"Volume claims",id:"volume-claims",level:4},{value:"Deployment",id:"deployment-1",level:4},{value:"Service",id:"service-1",level:4}],m={toc:p},d="wrapper";function c(e){let{components:n,...l}=e;return(0,o.kt)(d,(0,a.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"I've always been meaning to add an adblocker to my home network and now with the additional need to have internal hostnames for my services this would be a great time to put one in. There were two great open source solutions to consider:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Pihole")," - Pi-hole is a general purpose network-wide ad-blocker that protects your network from ads and trackers without requiring any setup on individual devices. It is able to block ads on any network device")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Adguard Home")," - AdGuard Home is a network-wide software for blocking ads & tracking. After you set it up, it\u2019ll cover ALL your home devices, and you don\u2019t need any client-side software for that."))),(0,o.kt)("p",null,"Honestly I really can't tell the difference so I decided to install both to trial!"),(0,o.kt)("h2",{id:"pihole"},"Pihole"),(0,o.kt)("h3",{id:"installing-pihole"},"Installing Pihole"),(0,o.kt)("p",null,"I wanted to create a bit of a file structure with all the required manifests which I can deploy at once:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"01-pihole-namespaces.yaml")," - manifest to create a namespace"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"02-pihole-configs.yaml")," - manifest to specify configuration values such as whitelist domains and blocklists"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"03-pihole-deployment.yaml")," - manifest to specify deployment of pihole such as the container location"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"04-pihole-service.yaml")," - manifest to specify by port mappings and service exposure between container and pod")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Worth noting here that I would normally be adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"pihole-ingress.yaml")," file here too to specify my traefik ingressRoute b resource but I won't be using traefik for this pihole or adguard home (as it will be a dns server)")),(0,o.kt)("p",null,"I also found out that you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f")," on and entire folder which deploys all the manifests within the folder specified so in my case:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f pihole/\n")),(0,o.kt)("h3",{id:"testing-pihole"},"Testing Pihole"),(0,o.kt)("p",null,"As mentioned earlier, I didn't use Traefik for this service so I'm expecting that Metallb assigned a separate IP address allocated."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"pihole",src:t(6842).Z,width:"1390",height:"338"})),(0,o.kt)("p",null,"Looks good, so I just need to navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://192.168.86.101/admin")," in my webbrowser to get to the admin portal"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"pihole2",src:t(1345).Z,width:"2254",height:"1426"})),(0,o.kt)("p",null,"An voila! Happy days. I can now use this as my DNS server, define some local DNS entries and start blocking some ads!"),(0,o.kt)("h2",{id:"adguard-home"},"Adguard Home"),(0,o.kt)("h3",{id:"installing-adguard-home"},"Installing Adguard Home"),(0,o.kt)("p",null,"I thought I'd try installing Adguard Home slightly differently and use the Kompose tool instead. Kompose is simple, you give it a ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," and it outputs a set of kubernetes manifests for you."),(0,o.kt)("p",null,"First things first, we need a docker-compose file so I head on over to docker hub to grab one for adguard. The docker-compose file looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yaml"',title:'"docker-compose.yaml"'},"version: '3.3'\nservices:\n    adguard:\n        container_name: adguardhome\n        restart: unless-stopped\n        volumes:\n            - '/my/own/workdir:/opt/adguardhome/work'\n            - '/my/own/confdir:/opt/adguardhome/conf'\n        ports:\n            - '53:53/tcp'\n            - '53:53/udp'\n            - '67:67/udp'\n            - '68:68/udp'\n            - '80:80/tcp'\n            - '443:443/tcp'\n            - '443:443/udp'\n            - '3000:3000/tcp'\n            - '853:853/tcp'\n            - '784:784/udp'\n            - '853:853/udp'\n            - '8853:8853/udp'\n            - '5443:5443/tcp'\n            - '5443:5443/udp'\n        image: run\n")),(0,o.kt)("p",null,"After installing ",(0,o.kt)("a",{parentName:"p",href:"https://kompose.io/"},"kompose"),", all I run ",(0,o.kt)("inlineCode",{parentName:"p"},"kompose convert")," to give my manifest files. Kompose gives me the following manifest files:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"adguard-claim0-persistentvolumeclaim.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"adguard-claim1-persistentvolumeclaim.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"adguard-deployment.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"adguard-service.yaml"))),(0,o.kt)("p",null,"To see the manifest in detail, I've included them in the Appendix below. "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"I did need to make a slight change to the ",(0,o.kt)("inlineCode",{parentName:"p"},"adguard-service.yaml")," auto generated file and that was to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," service type. This tells Kubernetes that I needed and external IP from Metallb")),(0,o.kt)("p",null,"Finally I create a namespace and run all manifests with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace adguard\nkubectl apply -f adguard/ -n adguard\n")),(0,o.kt)("h2",{id:"testing-adguard-home"},"Testing Adguard Home"),(0,o.kt)("p",null,"As with PiHole, I was expecting to see the pods running and an external IP that I could navigate to with my browser:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"adguard",src:t(3554).Z,width:"2256",height:"399"})),(0,o.kt)("p",null,"Sweet - looks like ",(0,o.kt)("inlineCode",{parentName:"p"},"192.168.86.102")," was allocated."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"adguard2",src:t(2942).Z,width:"2256",height:"1384"})),(0,o.kt)("h2",{id:"closing-thoughts"},"Closing thoughts"),(0,o.kt)("p",null,"Both Pihole and Adguard Home are very similar from a feature set perspective so I haven't really managed to separate them as yet. If I was being super picky I'd say that Pihole is ",(0,o.kt)("em",{parentName:"p"},"slightly")," more customisable with blocklists and Adguard Home has a ",(0,o.kt)("em",{parentName:"p"},"slightly")," better UI. I haven't decided if one it better than the other so I'll keep them both running for now and switch DNS Servers from time to time."),(0,o.kt)("h2",{id:"appendix"},"Appendix"),(0,o.kt)("h3",{id:"pihole-manifests"},"Pihole Manifests"),(0,o.kt)("p",null,"For those interested in the manifests here they are:"),(0,o.kt)("h4",{id:"namespace"},"Namespace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="01-pihole-namespaces.yaml"',title:'"01-pihole-namespaces.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: pihole\n")),(0,o.kt)("h4",{id:"configuration"},"Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="02-pihole-configs.yaml"',title:'"02-pihole-configs.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: custom.list\n  namespace: pihole\ndata:\n  custom.list: |\n    192.168.86.41 k3smaster\n    192.168.86.40 k3snode01\n    192.168.86.100 traefik.local.kasj.live\n    192.168.86.101 pihole.local.kasj.live\n    192.168.86.100 dash.local.kasj.live\n    192.168.86.100 grocy.local.kasj.live\n    192.168.86.100 kuma.local.kasj.live\n    192.168.86.100 cloud.local.kasj.live\n    192.168.86.100 portainer.local.kasj.live\n    192.168.86.100 argocd.local.kasj.live\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: adlists.list\n  namespace: pihole\ndata:\n  adlists.list: |\n    https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\n    https://adaway.org/hosts.txt\n    https://v.firebog.net/hosts/AdguardDNS.txt\n    https://v.firebog.net/hosts/Admiral.txt\n    https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt\n    https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt\n    https://v.firebog.net/hosts/Easylist.txt\n    https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext\n    https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\n    https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts\n    https://v.firebog.net/hosts/static/w3kbl.txt\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: whitelist.txt\n  namespace: pihole\ndata:\n  whitelist.txt: |\n    ichnaea.netflix.com\n    nrdp.nccp.netflix.com\n    androidtvchannels-pa.googleapis.com\n    lcprd1.samsungcloudsolution.net\n")),(0,o.kt)("h4",{id:"deployment"},"Deployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="03-pihole-deployment.yaml"',title:'"03-pihole-deployment.yaml"'},'as@lappa:~$ cat home-lab/prod-apps/pihole/03-pihole-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: pihole\n  name: pihole\n  namespace: pihole\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: pihole\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: pihole\n    spec:\n      containers:\n      - env:\n        - name: TZ\n          value: Australia/Melbourne\n        - name: WEBPASSWORD\n          value:\n        - name: DNS1\n          value: 9.9.9.9\n        - name: DNS2\n          value: 1.1.1.1\n        image: pihole/pihole:latest\n        imagePullPolicy: IfNotPresent\n        name: pihole\n        ports:\n        - name: dns-tcp\n          containerPort: 53\n          protocol: TCP\n        - name: dns-udp\n          containerPort: 53\n          protocol: UDP\n        - name: dhcp\n          containerPort: 67\n          protocol: UDP\n        - name: web\n          containerPort: 80\n          protocol: TCP\n        - name: https\n          containerPort: 443\n          protocol: TCP\n        resources:\n          requests:\n            cpu: "20m"\n            memory: "512Mi"\n          limits:\n            cpu: "250m"\n            memory: "896Mi"\n        readinessProbe:\n          exec:\n            command: [\'dig\', \'@127.0.0.1\', \'cnn.com\']\n          timeoutSeconds: 20\n          initialDelaySeconds: 5\n          periodSeconds: 60\n        livenessProbe:\n          tcpSocket:\n            port: dns-tcp\n          initialDelaySeconds: 15\n          periodSeconds: 30\n        volumeMounts:\n        - name: etc-pihole\n          mountPath: /etc/pihole\n        - name: etc-dnsmasq\n          mountPath: /etc/dnsmasq.d\n        - name: var-log\n          mountPath: /var/log\n        - name: var-log-lighttpd\n          mountPath: /var/log/lighttpd\n        - name: adlists\n          mountPath: /etc/pihole/adlists.list\n          subPath: adlists.list\n        - name: customlist\n          mountPath: /etc/pihole/custom.list\n          subPath: custom.list\n      restartPolicy: Always\n      volumes:\n      - name: etc-pihole\n        emptyDir:\n          medium: Memory\n      - name: etc-dnsmasq\n        emptyDir:\n          medium: Memory\n      - name: var-log\n        emptyDir:\n          medium: Memory\n      - name: var-log-lighttpd\n        emptyDir:\n          medium: Memory\n      - name: adlists\n        configMap:\n          name: adlists.list\n          items:\n            - key: adlists.list\n              path: adlists.list\n      - name: customlist\n        configMap:\n          name: custom.list\n          items:\n            - key: custom.list\n              path: custom.list\n')),(0,o.kt)("h4",{id:"service"},"Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="04-pihole-service.yaml"',title:'"04-pihole-service.yaml"'},"kind: Service\napiVersion: v1\nmetadata:\n  name: pihole-udp\n  namespace: pihole\n  annotations:\n    metallb.universe.tf/allow-shared-ip: dns\nspec:\n  selector:\n    app: pihole\n  ports:\n  - protocol: UDP\n    port: 53\n    name: dnsudp\n    targetPort: 53\n  type: LoadBalancer\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: pihole-tcp\n  namespace: pihole\n  annotations:\n    metallb.universe.tf/allow-shared-ip: dns\nspec:\n  selector:\n    app: pihole\n  ports:\n  - protocol: TCP\n    port: 53\n    name: dnstcp\n    targetPort: 53\n  - protocol: TCP\n    port: 80\n    name: web\n    targetPort: 80\n  type: LoadBalancer\n")),(0,o.kt)("h3",{id:"adguard-manifests"},"Adguard Manifests"),(0,o.kt)("h4",{id:"volume-claims"},"Volume claims"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-claim0-persistentvolumeclaim.yaml"',title:'"adguard-claim0-persistentvolumeclaim.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard-claim0\n  name: adguard-claim0\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\nstatus: {}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-claim1-persistentvolumeclaim.yaml"',title:'"adguard-claim1-persistentvolumeclaim.yaml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard-claim1\n  name: adguard-claim1\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\nstatus: {}\n")),(0,o.kt)("h4",{id:"deployment-1"},"Deployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-deployment.yaml"',title:'"adguard-deployment.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    kompose.cmd: kompose convert\n    kompose.version: 1.26.0 (40646f47)\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard\n  name: adguard\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      io.kompose.service: adguard\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        kompose.cmd: kompose convert\n        kompose.version: 1.26.0 (40646f47)\n      creationTimestamp: null\n      labels:\n        io.kompose.service: adguard\n    spec:\n      containers:\n        - image: adguard/adguardhome\n          name: adguardhome\n          ports:\n            - containerPort: 53\n            - containerPort: 53\n              protocol: UDP\n            - containerPort: 67\n              protocol: UDP\n            - containerPort: 68\n              protocol: UDP\n            - containerPort: 80\n            - containerPort: 443\n            - containerPort: 443\n              protocol: UDP\n            - containerPort: 3000\n            - containerPort: 853\n            - containerPort: 784\n              protocol: UDP\n            - containerPort: 853\n              protocol: UDP\n            - containerPort: 8853\n              protocol: UDP\n            - containerPort: 5443\n            - containerPort: 5443\n              protocol: UDP\n          resources: {}\n          volumeMounts:\n            - mountPath: /opt/adguardhome/work\n              name: adguard-claim0\n            - mountPath: /opt/adguardhome/conf\n              name: adguard-claim1\n      restartPolicy: Always\n      volumes:\n        - name: adguard-claim0\n          persistentVolumeClaim:\n            claimName: adguard-claim0\n        - name: adguard-claim1\n          persistentVolumeClaim:\n            claimName: adguard-claim1\nstatus: {}\n")),(0,o.kt)("h4",{id:"service-1"},"Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="adguard-service.yaml"',title:'"adguard-service.yaml"'},'apiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kompose.cmd: kompose convert\n    kompose.version: 1.26.0 (40646f47)\n  creationTimestamp: null\n  labels:\n    io.kompose.service: adguard\n  name: adguard\nspec:\n  ports:\n    - name: "53"\n      port: 53\n      targetPort: 53\n    - name: 53-udp\n      port: 53\n      protocol: UDP\n      targetPort: 53\n    - name: "67"\n      port: 67\n      protocol: UDP\n      targetPort: 67\n    - name: "68"\n      port: 68\n      protocol: UDP\n      targetPort: 68\n    - name: "80"\n      port: 80\n      targetPort: 80\n    - name: "443"\n      port: 443\n      targetPort: 443\n    - name: 443-udp\n      port: 443\n      protocol: UDP\n      targetPort: 443\n    - name: "3000"\n      port: 3000\n      targetPort: 3000\n    - name: "853"\n      port: 853\n      targetPort: 853\n    - name: "784"\n      port: 784\n      protocol: UDP\n      targetPort: 784\n    - name: 853-udp\n      port: 853\n      protocol: UDP\n      targetPort: 853\n    - name: "8853"\n      port: 8853\n      protocol: UDP\n      targetPort: 8853\n    - name: "5443"\n      port: 5443\n      targetPort: 5443\n    - name: 5443-udp\n      port: 5443\n      protocol: UDP\n      targetPort: 5443\n  type: LoadBalancer\n  selector:\n    io.kompose.service: adguard\n')))}c.isMDXComponent=!0},3554:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/adguard-fe1369636cd1e21af3d75f605c2dc12f.png"},2942:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/adguard2-436c58c18eda188024e4fbb60910b540.png"},6842:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pihole-76f7d68f1204e116e32b1b702b8201aa.png"},1345:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pihole2-335e31e7558826301512ab114217bcca.png"}}]);